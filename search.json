[{"path":"/articles/part1c.html","id":"question","dir":"Articles","previous_headings":"","what":"Question","title":"Example analysis","text":"data analysis aims explore college tuition pay graduation relationship.","code":""},{"path":"/articles/part1c.html","id":"original-data","dir":"Articles","previous_headings":"","what":"Original Data","title":"Example analysis","text":"data originally came US Department Education. found data TidyTuesday link GitHub repository https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10. use 2 datasets repository: tuition_cost.csv contains -state -state tuition school salary_potential.csv contains early mid career pay USD students school.","code":""},{"path":"/articles/part1c.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Example analysis","text":"Data dictionaries available : https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#tuition_costcsv, https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#salary_potentialcsv.","code":""},{"path":"/articles/part1c.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Example analysis","text":"","code":"# tests if a directory named \"data\" exists locally if(!dir.exists(here(\"data\"))) { dir.create(here(\"data\")) }  if(!file.exists(here(\"data\", \"tuition_cost.RData\")) | !file.exists(here(\"data\", \"salary_potential.RData\"))){   tuition_cost <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')   salary_potential <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')      # save the files to RData objects   save(tuition_cost, file = here(\"data\", \"tuition_cost.RData\"))   save(salary_potential, file = here(\"data\", \"salary_potential.RData\")) } tuition_cost <- get(load(here(\"data\", \"tuition_cost.RData\"))) salary_potential <- get(load(here(\"data\", \"salary_potential.RData\"))) glimpse(tuition_cost) #> Rows: 2,973 #> Columns: 10 #> $ name                 <chr> \"Aaniiih Nakoda College\", \"Abilene Christian Univ… #> $ state                <chr> \"Montana\", \"Texas\", \"Georgia\", \"Minnesota\", \"Cali… #> $ state_code           <chr> \"MT\", \"TX\", \"GA\", \"MN\", \"CA\", \"CO\", \"NY\", \"NY\", \"… #> $ type                 <chr> \"Public\", \"Private\", \"Public\", \"For Profit\", \"For… #> $ degree_length        <chr> \"2 Year\", \"4 Year\", \"2 Year\", \"2 Year\", \"4 Year\",… #> $ room_and_board       <dbl> NA, 10350, 8474, NA, 16648, 8782, 16030, 11660, 1… #> $ in_state_tuition     <dbl> 2380, 34850, 4128, 17661, 27810, 9440, 38660, 537… #> $ in_state_total       <dbl> 2380, 45200, 12602, 17661, 44458, 18222, 54690, 1… #> $ out_of_state_tuition <dbl> 2380, 34850, 12550, 17661, 27810, 20456, 38660, 9… #> $ out_of_state_total   <dbl> 2380, 45200, 21024, 17661, 44458, 29238, 54690, 2… glimpse(salary_potential) #> Rows: 935 #> Columns: 7 #> $ rank                      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ name                      <chr> \"Auburn University\", \"University of Alabama … #> $ state_name                <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", … #> $ early_career_pay          <dbl> 54400, 57500, 52300, 54500, 48400, 46600, 49… #> $ mid_career_pay            <dbl> 104500, 103900, 97400, 93500, 90500, 89100, … #> $ make_world_better_percent <dbl> 51, 59, 50, 61, 52, 53, 48, 57, 56, 58, 60, … #> $ stem_percent              <dbl> 31, 45, 15, 30, 3, 12, 27, 17, 17, 20, 8, 7,…"},{"path":"/articles/part1c.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data Wrangling","title":"Example analysis","text":"Luckily, don’t missing values. , see possible difference 2 columns caused dash values “state_name”. ’re going check . remove 4 observations inconsistent information. keep 4-year schools. want find modal value(s) percent student body STEM: can see modes 0 7.","code":"# We first combine the 2 data frames. We include only schools that are in both data frames. combined <- inner_join(tuition_cost, salary_potential, by = \"name\") # Remove unwanted variables combined <- combined %>% select(-room_and_board, -in_state_total, -out_of_state_total, -rank, -make_world_better_percent)  # Check if there's any NAs. If missing values exist, get the corresponding row numbers. naRows(combined) #> integer(0) # We want to check whether there's any discrepancy between the \"state\" variables from the 2 data frames. temp <- map2(.x = combined$state, .y = combined$state_name, .f = ~str_equal(.x, .y))  # Save the index of not matched cases ind <- which(temp == FALSE)  combined %>% slice(ind) %>% select(state, state_name) #> # A tibble: 135 × 2 #>    state          state_name     #>    <chr>          <chr>          #>  1 New York       New-York       #>  2 North Carolina North-Carolina #>  3 South Dakota   South-Dakota   #>  4 New York       New-York       #>  5 North Carolina North-Carolina #>  6 North Carolina North-Carolina #>  7 South Carolina South-Carolina #>  8 South Dakota   South-Dakota   #>  9 New Jersey     New-Jersey     #> 10 West Virginia  West-Virginia  #> # … with 125 more rows # Replace \"-\" with \" \" combined$state_name <- str_replace(combined$state_name, \"-\", \" \") temp2 <- pmap(list(x = combined$state, y = combined$state_name),               .f = ~str_equal(..1, ..2)) ind2 <- which(temp2 == FALSE) combined %>% slice(ind2) %>% select(name, state, state_code, state_name) #> # A tibble: 4 × 4 #>   name                 state      state_code state_name #>   <chr>                <chr>      <chr>      <chr>      #> 1 Northwestern College Illinois   IL         Iowa       #> 2 St. John's College   Illinois   IL         Maryland   #> 3 St. John's College   New Mexico NM         Maryland   #> 4 Sterling College     Vermont    VT         Kansas combined <- combined %>% slice(-ind2) %>% select(-state_name) combined #> # A tibble: 724 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 714 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent combined %>% count(degree_length) #> # A tibble: 2 × 2 #>   degree_length     n #>   <chr>         <int> #> 1 2 Year            3 #> 2 4 Year          721 combined <- combined %>% filter(degree_length == \"4 Year\") combined #> # A tibble: 721 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 711 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent mmode(combined$stem_percent) #> [1] 0 7"},{"path":"/articles/part1c.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data Visualization","title":"Example analysis","text":"Plot 1  Plot 2  Plot 3","code":"combined %>% ggplot(aes(x = type, y = out_of_state_tuition)) +     geom_boxplot() +      labs(title = \"Out-of-state Tuition by School Type\",           subtitle = \"This is a box plot displaying the summary statistics for the out-of-state tuition by school type.\\nWe can see that the first quartile of private school tuition is above the third quartile of the\\npublic school tuition.\",           caption = \"Mincen Liu\") +     xlab(\"school type\") + ylab(\"out-of-state tuition in USD\") combined %>% ggplot(aes(x = out_of_state_tuition, y = mid_career_pay)) +      geom_point() +      facet_grid(type ~ .) +      labs(title = \"Mid Career Pay vs. Out-of-state Tuition by School Type\",           subtitle = \"This is a scatter plot showing the relationship between the mid career pay and the out-of-state\\ntuition, faceted by school type. We see an overall positive relation in each school type.\",           caption = \"Mincen Liu\") +     xlab(\"out-of-state tuition in USD\") + ylab(\"mid career pay in USD\") combined %>% ggplot(aes(early_career_pay)) +     geom_density() +     labs(title = \"Early Career Pay\",           subtitle = \"This is a density plot of the early career pay. We see a right-skewed distribution.\",           caption = \"Mincen Liu\") +     xlab(\"early career pay in USD\") + ylab(\"density\")"},{"path":"/articles/part1c.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Example analysis","text":"average, private school --state tuition much higher public school --state tuition among 4-year institutions. see overall positive relation mid career pay --state tuition school type. early career pay right-skewed distribution.","code":""},{"path":"/articles/part1c.html","id":"list-of-functions-used","dir":"Articles","previous_headings":"","what":"List of Functions Used","title":"Example analysis","text":"dplyr: glimpse(), inner_join(), select(), slice(), count(), filter() stringr: str_equal(), str_replace() purrr: map2(), pmap() ggplot2: geom_boxplot(), geom_point(), geom_density(), facet_grid() omnibus: naRows(), mmode()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam B. Smith. Maintainer, author. Mincen Liu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith , Liu M (2022). omnibus: Helper Tools Managing Data, Dates, Missing Values, Text. R package version 1.1.3, https://github.com/adamlilith/omnibus.","code":"@Manual{,   title = {omnibus: Helper Tools for Managing Data, Dates, Missing Values, and Text},   author = {Adam B. Smith and Mincen Liu},   year = {2022},   note = {R package version 1.1.3},   url = {https://github.com/adamlilith/omnibus}, }"},{"path":[]},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"original R package came : https://github.com/adamlilith/omnibus. URL deployed website: https://jhu-statprogramming-fall-2022.github.io/biostat840-project3-pkgdown-mincenliu/. changed overall appearance website theme Bootswatch. changed background color black text color blue gray. changed highlighting code blocks “theme: ayu-mirage”. changed background inline code light orange. changed font headings. changed font majority text.","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"R Utility Functions 99%  assortment helper functions managing data (e.g., rotating values matrices user-defined angle, switching row- column-indexing), dates (e.g., intuiting year messy date strings), handling missing values (e.g., removing elements/rows across multiple vectors matrices NA), text (e.g., flushing reports console real-time).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"version 1.1.2, omnibus CRAN! can install latest CRAN-stable version normal way install packages CRAN, development version using: may need install remotes package first.","code":"remotes::install_github('adamlilith/omnibus', dependencies=TRUE)"},{"path":"/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data manipulation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. mergeLists: Merge lists. ‘renumSeq’: Renumber sequence. maxRuns: Maximum number continuous “runs” values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/index.html","id":"dates","dir":"","previous_headings":"","what":"Dates","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year? yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/index.html","id":"geometry","dir":"","previous_headings":"","what":"Geometry","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/index.html","id":"handling-nas","dir":"","previous_headings":"","what":"Handling NAs","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"%<na%, %<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA.","code":""},{"path":"/index.html","id":"data-properties","dir":"","previous_headings":"","what":"Data properties","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax .min pmin (vectorized .max .min).","code":""},{"path":"/index.html","id":"system","dir":"","previous_headings":"","what":"System","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"dirCreate: Nicer version dir.create(). eps: Smallest floating point value computer can think . listFiles: Nicer version list.files(). memUse: Display largest objects memory.","code":""},{"path":"/index.html","id":"text","dir":"","previous_headings":"","what":"Text","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 –> 007). say: Replacement print('abc'); flush.console().","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"basic example isLeapYear() function:","code":"isLeapYear(2022)"},{"path":"/reference/bracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify values bracketing another value — bracket","title":"Identify values bracketing another value — bracket","text":"function takes ordered vector numeric character values finds pair bracket third value, x. x exactly equal one values vector, single value equal x returned. x falls outside range vector, least/extreme value vector returned (depending side distribution vector x resides). Optionally, users can function return index values bracket x.","code":""},{"path":"/reference/bracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify values bracketing another value — bracket","text":"","code":"bracket(x, by, index = FALSE, inner = TRUE, warn = FALSE)"},{"path":"/reference/bracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify values bracketing another value — bracket","text":"x One numeric character values. vector numeric character values. sorted (high low low high... , error result). index Logical. FALSE (default), numeric values returned. TRUE, index indices bracketing value(s) returned. inner Logical. TRUE (default), x surrounded least one series repeating values, return values (indices) among repeated sequence(s) closest value x. FALSE, return value(s) (indices) among repeated sequence(s) farthest value x. example, index = TRUE, = c(1, 2, 2, 2, 3, 3), x = 2.5, setting inner = TRUE return index third 2 first 3.  inner = FALSE, function returns index first 2 second 3. warn Logical. TRUE, warn x outside range .","code":""},{"path":"/reference/bracket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify values bracketing another value — bracket","text":"x single value, function return numeric vector length 1 2, depending many values bracket x. values , median index (value) returned. x vector, result list one element per item x element format case x single value.","code":""},{"path":"/reference/bracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify values bracketing another value — bracket","text":"","code":"by <- 2 * (1:5) bracket(4.2, by) #> [1] 4 6 bracket(6.8, by) #> [1] 6 8  bracket(3.2, by, index=TRUE) #> [1] 1 2 bracket(c(3.2, 9.8, 4), by) #> [[1]] #> [1] 2 4 #>  #> [[2]] #> [1]  8 10 #>  #> [[3]] #> [1] 4 #>   bracket(2, c(0, 1, 1, 1, 3, 5), index=TRUE) #> [1] 4 5 bracket(3, c(1, 2, 10)) #> [1]  2 10  bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6  # \\donttest{ by <- 1:10 bracket(-100, by) #> [1] 1 bracket(100, by) #> [1] 10 # }"},{"path":"/reference/capIt.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter of a string — capIt","title":"Capitalize first letter of a string — capIt","text":"function capitalizes first letter string first letters list strings.","code":""},{"path":"/reference/capIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter of a string — capIt","text":"","code":"capIt(x)"},{"path":"/reference/capIt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter of a string — capIt","text":"x Character character list.","code":""},{"path":"/reference/capIt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter of a string — capIt","text":"Character character list.","code":""},{"path":[]},{"path":"/reference/capIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize first letter of a string — capIt","text":"","code":"x <- c('shots', 'were', 'exchanged at the ', 'hospital.') capIt(x) #>              shots               were  exchanged at the           hospital.  #>            \"Shots\"             \"Were\" \"Exchanged At The\"        \"Hospital.\""},{"path":"/reference/combineDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with different fields using a crosswalk table — combineDf","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"function combines multiple data frames, possibly different column names, single data frame.  Usually merge faster easier implement columns merged names, rbind always faster much easier column names match exactly.","code":""},{"path":"/reference/combineDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"combineDf(   ...,   crosswalk,   sep = \"; \",   use = NULL,   classes = NULL,   verbose = FALSE )"},{"path":"/reference/combineDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"... list data frames. ignored, paths file names data frames can specified crosswalk. crosswalk Data frame. Column names fields desired output data frame. row corresponds different data frame join. ... used first column must paths file names CSV, RDS, RData files representing data frames join. column, elements cell contain name column data frame coincides column name crosswalk table.  example, final output column name \"species\" \"data frame #1\" column named \"Species\" \"data frame #2\" column named \"scientificName\", first value crosswalk \"species\" column \"Species\" second \"scientificName\". complex joining can done using following cells crosswalk: _ start value: indicates value crosswalk table read text repeated output row (minus initial \"_\"). example, \"_inspected\" repeat string \"inspected\" every row output corresponding respective data frame. 'c(~~~)': paste together fields source data frame named ... using string specified sep (\"~~~\" represents column names respective data frame). Note entire string must inside single double quotes 'c()' \"c()\" columns named inside c() must delineated kind quote (single c() delineated double, vice versa). NA: Repeats NA. sep Character, specifies string put fields combined c(~~~~) format crosswalk. use Logical, Character, NULL, ... used list logical elements (TRUE FALSE), column name crosswalk logical values indicating whether particular data frame collated, NULL, case data frames used (default). classes Character character list, specifies classes (e.g., numeric, character) assigned column output table. NULL, classes assumed character.  just one value listed, columns set class. list, must length number columns crosswalk specify class column. verbose Logical, TRUE prints extra information execution.  Useful debugging crosswalk table.","code":""},{"path":"/reference/combineDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"data frame.","code":""},{"path":[]},{"path":"/reference/combineDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"df1 <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff') df2 <- data.frame(y1=11:15, y3=rev(letters)[1:5])  crosswalk <- data.frame(   a=c('x1', 'y1'),   b=c('x2', '_valid'),   c=c('c(\"x3\", \"x4\")', 'y3'),   d=c('x5', NA) )  out <- combineDf(df1, df2, crosswalk=crosswalk) out #>     a     b    c     d #> 1   1 valid a; A stuff #> 2   2 valid b; B stuff #> 3   3 valid c; C stuff #> 4   4 valid d; D stuff #> 5   5 valid e; E stuff #> 6  11 valid    z  <NA> #> 7  12 valid    y  <NA> #> 8  13 valid    x  <NA> #> 9  14 valid    w  <NA> #> 10 15 valid    v  <NA>"},{"path":"/reference/corner.html","id":null,"dir":"Reference","previous_headings":"","what":"Corner of a matrix or data frame — corner","title":"Corner of a matrix or data frame — corner","text":"function returns corner matrix data frame (.e., upper left, upper right, lower left, lower right).","code":""},{"path":"/reference/corner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corner of a matrix or data frame — corner","text":"","code":"corner(x, corner = 1, size = 5)"},{"path":"/reference/corner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corner of a matrix or data frame — corner","text":"x Data frame, matrix, vector number rows elements . corner Integer set 1, 2, 3, 4 character set 'topleft', 'topright', 'bottomleft', 'bottomright' set 'tl', 'tr', 'bl', 'br'. Indicates corner return. Integers 1, 2, 3 4 correspond top left, top right, bottom left, bottom right corners. default 1, top left corner. size Positive integer, number rows columns return. fewer columns/rows indicated columns/rows returned.","code":""},{"path":"/reference/corner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corner of a matrix or data frame — corner","text":"matrix data frame.","code":""},{"path":[]},{"path":"/reference/corner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corner of a matrix or data frame — corner","text":"","code":"x <- matrix(1:120, ncol=12, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1   11   21   31   41   51   61   71   81    91   101   111 #>  [2,]    2   12   22   32   42   52   62   72   82    92   102   112 #>  [3,]    3   13   23   33   43   53   63   73   83    93   103   113 #>  [4,]    4   14   24   34   44   54   64   74   84    94   104   114 #>  [5,]    5   15   25   35   45   55   65   75   85    95   105   115 #>  [6,]    6   16   26   36   46   56   66   76   86    96   106   116 #>  [7,]    7   17   27   37   47   57   67   77   87    97   107   117 #>  [8,]    8   18   28   38   48   58   68   78   88    98   108   118 #>  [9,]    9   19   29   39   49   59   69   79   89    99   109   119 #> [10,]   10   20   30   40   50   60   70   80   90   100   110   120 corner(x, 1) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   11   21   31   41 #> [2,]    2   12   22   32   42 #> [3,]    3   13   23   33   43 #> [4,]    4   14   24   34   44 #> [5,]    5   15   25   35   45 corner(x, 2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   71   81   91  101  111 #> [2,]   72   82   92  102  112 #> [3,]   73   83   93  103  113 #> [4,]   74   84   94  104  114 #> [5,]   75   85   95  105  115 corner(x, 3) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   16   26   36   46 #> [2,]    7   17   27   37   47 #> [3,]    8   18   28   38   48 #> [4,]    9   19   29   39   49 #> [5,]   10   20   30   40   50 corner(x, 4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   76   86   96  106  116 #> [2,]   77   87   97  107  117 #> [3,]   78   88   98  108  118 #> [4,]   79   89   99  109  119 #> [5,]   80   90  100  110  120"},{"path":"/reference/countDecDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of digits after a decimal place — countDecDigits","title":"Calculate number of digits after a decimal place — countDecDigits","text":"function calculates number digits decimal place. Note trailing zeros likely ignored.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(x)"},{"path":"/reference/countDecDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of digits after a decimal place — countDecDigits","text":"x Numeric numeric list.","code":""},{"path":"/reference/countDecDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of digits after a decimal place — countDecDigits","text":"Integer.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(c(1, 1.1, 1.12, 1.123, 1.1234, -1, 0, 10.0000, 10.0010)) #> [1] 0 1 2 3 4 0 0 0 3"},{"path":"/reference/cull.html","id":null,"dir":"Reference","previous_headings":"","what":"Force objects to have length or rows equal to the shortest — cull","title":"Force objects to have length or rows equal to the shortest — cull","text":"function takes set vectors, data frames, matrices removes last values/rows length/number rows equal shortest among .","code":""},{"path":"/reference/cull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"cull(...)"},{"path":"/reference/cull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force objects to have length or rows equal to the shortest — cull","text":"... Vectors, matrices, data frames.","code":""},{"path":"/reference/cull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force objects to have length or rows equal to the shortest — cull","text":"List objects one element per object supplied argument function.","code":""},{"path":"/reference/cull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"a <- 1:10 b <- 1:20 c <- letters cull(a, b, c) #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $b #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $c #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  x <- data.frame(x=1:10, y=letters[1:10]) y <- data.frame(x=1:26, y=letters) cull(x, y) #> $x #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>  #> $y #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>"},{"path":"/reference/dirCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for dir.create() — dirCreate","title":"Replacement for dir.create() — dirCreate","text":"function somewhat friendlier version dir.create automatically sets recursive=TRUE showWarnings=FALSE arguments.","code":""},{"path":"/reference/dirCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for dir.create() — dirCreate","text":"","code":"dirCreate(...)"},{"path":"/reference/dirCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for dir.create() — dirCreate","text":"... Character string(s). path name directory create. Multiple strings pasted together one path, although slashes pasted .","code":""},{"path":"/reference/dirCreate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for dir.create() — dirCreate","text":"Nothing (creates directory storage system).","code":""},{"path":[]},{"path":"/reference/domLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for leap years — domLeap","title":"Day of month for leap years — domLeap","text":"Data frame day month month leap year.","code":""},{"path":"/reference/domLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for leap years — domLeap","text":"","code":"domLeap"},{"path":"/reference/domLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for leap years — domLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for leap years — domLeap","text":"","code":"data(domLeap) domLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     29     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/domNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for non-leap years — domNonLeap","title":"Day of month for non-leap years — domNonLeap","text":"Data frame day month month non-leap year.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for non-leap years — domNonLeap","text":"","code":"domNonLeap"},{"path":"/reference/domNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for non-leap years — domNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for non-leap years — domNonLeap","text":"","code":"data(domNonLeap) domNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     NA     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/doyLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of year for leap years — doyLeap","title":"Day of year for leap years — doyLeap","text":"Data frame day year month leap year.","code":""},{"path":"/reference/doyLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of year for leap years — doyLeap","text":"","code":"doyLeap"},{"path":"/reference/doyLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of year for leap years — doyLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of year for leap years — doyLeap","text":"","code":"data(doyLeap) doyLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     61     92    122    153    183    214    245     275 #> 2       2     33     62     93    123    154    184    215    246     276 #> 3       3     34     63     94    124    155    185    216    247     277 #> 4       4     35     64     95    125    156    186    217    248     278 #> 5       5     36     65     96    126    157    187    218    249     279 #> 6       6     37     66     97    127    158    188    219    250     280 #> 7       7     38     67     98    128    159    189    220    251     281 #> 8       8     39     68     99    129    160    190    221    252     282 #> 9       9     40     69    100    130    161    191    222    253     283 #> 10     10     41     70    101    131    162    192    223    254     284 #> 11     11     42     71    102    132    163    193    224    255     285 #> 12     12     43     72    103    133    164    194    225    256     286 #> 13     13     44     73    104    134    165    195    226    257     287 #> 14     14     45     74    105    135    166    196    227    258     288 #> 15     15     46     75    106    136    167    197    228    259     289 #> 16     16     47     76    107    137    168    198    229    260     290 #> 17     17     48     77    108    138    169    199    230    261     291 #> 18     18     49     78    109    139    170    200    231    262     292 #> 19     19     50     79    110    140    171    201    232    263     293 #> 20     20     51     80    111    141    172    202    233    264     294 #> 21     21     52     81    112    142    173    203    234    265     295 #> 22     22     53     82    113    143    174    204    235    266     296 #> 23     23     54     83    114    144    175    205    236    267     297 #> 24     24     55     84    115    145    176    206    237    268     298 #> 25     25     56     85    116    146    177    207    238    269     299 #> 26     26     57     86    117    147    178    208    239    270     300 #> 27     27     58     87    118    148    179    209    240    271     301 #> 28     28     59     88    119    149    180    210    241    272     302 #> 29     29     60     89    120    150    181    211    242    273     303 #> 30     30     NA     90    121    151    182    212    243    274     304 #> 31     31     NA     91     NA    152     NA    213    244     NA     305 #>    month11 month12 #> 1      306     336 #> 2      307     337 #> 3      308     338 #> 4      309     339 #> 5      310     340 #> 6      311     341 #> 7      312     342 #> 8      313     343 #> 9      314     344 #> 10     315     345 #> 11     316     346 #> 12     317     347 #> 13     318     348 #> 14     319     349 #> 15     320     350 #> 16     321     351 #> 17     322     352 #> 18     323     353 #> 19     324     354 #> 20     325     355 #> 21     326     356 #> 22     327     357 #> 23     328     358 #> 24     329     359 #> 25     330     360 #> 26     331     361 #> 27     332     362 #> 28     333     363 #> 29     334     364 #> 30     335     365 #> 31      NA     366"},{"path":"/reference/doyNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Days of year for non-leap years — doyNonLeap","title":"Days of year for non-leap years — doyNonLeap","text":"Data frame days year month non-leap year","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"doyNonLeap"},{"path":"/reference/doyNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Days of year for non-leap years — doyNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"data(doyNonLeap) doyNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     60     91    121    152    182    213    244     274 #> 2       2     33     61     92    122    153    183    214    245     275 #> 3       3     34     62     93    123    154    184    215    246     276 #> 4       4     35     63     94    124    155    185    216    247     277 #> 5       5     36     64     95    125    156    186    217    248     278 #> 6       6     37     65     96    126    157    187    218    249     279 #> 7       7     38     66     97    127    158    188    219    250     280 #> 8       8     39     67     98    128    159    189    220    251     281 #> 9       9     40     68     99    129    160    190    221    252     282 #> 10     10     41     69    100    130    161    191    222    253     283 #> 11     11     42     70    101    131    162    192    223    254     284 #> 12     12     43     71    102    132    163    193    224    255     285 #> 13     13     44     72    103    133    164    194    225    256     286 #> 14     14     45     73    104    134    165    195    226    257     287 #> 15     15     46     74    105    135    166    196    227    258     288 #> 16     16     47     75    106    136    167    197    228    259     289 #> 17     17     48     76    107    137    168    198    229    260     290 #> 18     18     49     77    108    138    169    199    230    261     291 #> 19     19     50     78    109    139    170    200    231    262     292 #> 20     20     51     79    110    140    171    201    232    263     293 #> 21     21     52     80    111    141    172    202    233    264     294 #> 22     22     53     81    112    142    173    203    234    265     295 #> 23     23     54     82    113    143    174    204    235    266     296 #> 24     24     55     83    114    144    175    205    236    267     297 #> 25     25     56     84    115    145    176    206    237    268     298 #> 26     26     57     85    116    146    177    207    238    269     299 #> 27     27     58     86    117    147    178    208    239    270     300 #> 28     28     59     87    118    148    179    209    240    271     301 #> 29     29     NA     88    119    149    180    210    241    272     302 #> 30     30     NA     89    120    150    181    211    242    273     303 #> 31     31     NA     90     NA    151     NA    212    243     NA     304 #>    month11 month12 #> 1      305     335 #> 2      306     336 #> 3      307     337 #> 4      308     338 #> 5      309     339 #> 6      310     340 #> 7      311     341 #> 8      312     342 #> 9      313     343 #> 10     314     344 #> 11     315     345 #> 12     316     346 #> 13     317     347 #> 14     318     348 #> 15     319     349 #> 16     320     350 #> 17     321     351 #> 18     322     352 #> 19     323     353 #> 20     324     354 #> 21     325     355 #> 22     326     356 #> 23     327     357 #> 24     328     358 #> 25     329     359 #> 26     330     360 #> 27     331     361 #> 28     332     362 #> 29     333     363 #> 30     334     364 #> 31      NA     365"},{"path":"/reference/ellipseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"function returns names objects input function ellipses. useful called inside function.","code":""},{"path":"/reference/ellipseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"","code":"ellipseNames(...)"},{"path":"/reference/ellipseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"... Objects.","code":""},{"path":"/reference/ellipseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"Character list.","code":""},{"path":"/reference/eps.html","id":null,"dir":"Reference","previous_headings":"","what":"The smallest machine-readable number — eps","title":"The smallest machine-readable number — eps","text":"function returns smallest machine-readable number (equal .Machine$double.eps).","code":""},{"path":"/reference/eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The smallest machine-readable number — eps","text":"","code":"eps()"},{"path":"/reference/eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The smallest machine-readable number — eps","text":"Numeric value.","code":""},{"path":"/reference/eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The smallest machine-readable number — eps","text":"","code":"eps() #> [1] 2.220446e-16"},{"path":"/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert values into a vector — insert","title":"Insert values into a vector — insert","text":"function inserts values vector, lengthening overall vector. different , say, x[1:3] <- c('', 'b', 'c') simply replaces values indices 1 3.","code":""},{"path":"/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert values into a vector — insert","text":"","code":"insert(x, into, at, warn = TRUE)"},{"path":"/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert values into a vector — insert","text":"x Vector values insert. vector values insert x. Vector positions (indices) x inserted. length x shorter length , values x recycled warning produced. warn TRUE, provide warnings.","code":""},{"path":"/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert values into a vector — insert","text":"Vector.","code":""},{"path":[]},{"path":"/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert values into a vector — insert","text":"","code":"x <- -1:-3 into <- 10:20 at <- c(1, 3, 14) insert(x, into, at) #>  [1] -1 10 -2 11 12 13 14 15 16 17 18 19 20 -3  insert(-1, into, at) #> Warning: Length of x is shorter than the length of at. Recycling x. #>  [1] -1 10 -1 11 12 13 14 15 16 17 18 19 20 -1"},{"path":"/reference/insertCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a column or row into a data frame or matrix — insertCol","title":"Insert a column or row into a data frame or matrix — insertCol","text":"function inserts one columns rows another column row data frame matrix. similar cbind except inserted column(s)/row(s) can placed anywhere.","code":""},{"path":"/reference/insertCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"insertCol(x, into, at = NULL, before = TRUE)  insertRow(x, into, at = NULL, before = TRUE)"},{"path":"/reference/insertCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a column or row into a data frame or matrix — insertCol","text":"x Data frame, matrix, vector number columns rows elements . Data frame matrix x inserted. Character, integer, NULL. Name column column number name row row number insertion. NULL (default), result exactly cbind(, x except retains row numbers column names . Logical, TRUE (default) insertion occur front column row named , FALSE . Ignored NULL.","code":""},{"path":"/reference/insertCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a column or row into a data frame or matrix — insertCol","text":"data frame.","code":""},{"path":"/reference/insertCol.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Insert a column or row into a data frame or matrix — insertCol","text":"insertRow(): Insert column row data frame matrix","code":""},{"path":[]},{"path":"/reference/insertCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"x <- data.frame(y1=11:15, y2=rev(letters)[1:5]) into <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff')  insertCol(x, into=into, at='x3') #>   x1    x2 y1 y2 x3 x4    x5 #> 1  1 valid 11  z  a  A stuff #> 2  2 valid 12  y  b  B stuff #> 3  3 valid 13  x  c  C stuff #> 4  4 valid 14  w  d  D stuff #> 5  5 valid 15  v  e  E stuff insertCol(x, into=into, at='x3', before=FALSE) #>   x1    x2 x3 y1 y2 x4    x5 #> 1  1 valid  a 11  z  A stuff #> 2  2 valid  b 12  y  B stuff #> 3  3 valid  c 13  x  C stuff #> 4  4 valid  d 14  w  D stuff #> 5  5 valid  e 15  v  E stuff insertCol(x, into) #>   x1    x2 x3 x4    x5 y1 y2 #> 1  1 valid  a  A stuff 11  z #> 2  2 valid  b  B stuff 12  y #> 3  3 valid  c  C stuff 13  x #> 4  4 valid  d  D stuff 14  w #> 5  5 valid  e  E stuff 15  v  x <- data.frame(x1=1:3, x2=LETTERS[1:3]) into <- data.frame(x1=11:15, x2='valid') row.names(into) <- letters[1:5]  insertRow(x, into=into, at='b') #>   x1    x2 #> a 11 valid #> 1  1     A #> 2  2     B #> 3  3     C #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into=into, at='b', before=FALSE) #>   x1    x2 #> a 11 valid #> b 12 valid #> 1  1     A #> 2  2     B #> 3  3     C #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into) #>   x1    x2 #> a 11 valid #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid #> 1  1     A #> 2  2     B #> 3  3     C"},{"path":"/reference/isLeapYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a year a leap year? — isLeapYear","title":"Is a year a leap year? — isLeapYear","text":"Returns TRUE year leap year. can use \"negative\" years BCE.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(x)"},{"path":"/reference/isLeapYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a year a leap year? — isLeapYear","text":"x Integer vector integers representing years.","code":""},{"path":"/reference/isLeapYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a year a leap year? — isLeapYear","text":"Vector logical values.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(1990:2004) # note 2000 *was* not a leap year #>  [1] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE #> [13] FALSE FALSE  TRUE isLeapYear(1896:1904) # 1900 was *not* a leap year #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/isTRUENA.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized test for truth robust to NA — isTRUENA","title":"Vectorized test for truth robust to NA — isTRUENA","text":"functions work exactly x == TRUE x == FALSE default return FALSE cases NA.","code":""},{"path":"/reference/isTRUENA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"isTRUENA(x, ifNA = FALSE)  isFALSENA(x, ifNA = FALSE)"},{"path":"/reference/isTRUENA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized test for truth robust to NA — isTRUENA","text":"x Single value condition vector values evaluate. ifNA Logical, value return result evaluating x NA. Note can anything (.e., TRUE, FALSE, number, etc.).","code":""},{"path":"/reference/isTRUENA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized test for truth robust to NA — isTRUENA","text":"Logical value specified ifNA.","code":""},{"path":"/reference/isTRUENA.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Vectorized test for truth robust to NA — isTRUENA","text":"isFALSENA(): Vectorized test truth robust NA","code":""},{"path":[]},{"path":"/reference/isTRUENA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"x <- c(TRUE, TRUE, FALSE, NA) x == TRUE #> [1]  TRUE  TRUE FALSE    NA isTRUENA(x) #> [1]  TRUE  TRUE FALSE FALSE x == FALSE #> [1] FALSE FALSE  TRUE    NA isFALSENA(x) #> [1] FALSE FALSE  TRUE FALSE isTRUENA(x, ifNA = Inf) #> [1]   1   1   0 Inf # note that isTRUE and isFALSE are not vectorized isTRUE(x) #> [1] FALSE isFALSE(x) #> [1] FALSE"},{"path":"/reference/listFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for list.files() — listFiles","title":"Replacement for list.files() — listFiles","text":"function slightly friendlier version list.files automatically includes full.names=TRUE argument.","code":""},{"path":"/reference/listFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for list.files() — listFiles","text":"","code":"listFiles(x, ...)"},{"path":"/reference/listFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for list.files() — listFiles","text":"x Path name folder containing files list. ... Arguments pass list.files (full.names).","code":""},{"path":"/reference/listFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for list.files() — listFiles","text":"Character list.","code":""},{"path":[]},{"path":"/reference/listFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacement for list.files() — listFiles","text":"","code":"# list files in location where R is installed listFiles(R.home()) #>  [1] \"/Library/Frameworks/R.framework/Resources/COPYING\"      #>  [2] \"/Library/Frameworks/R.framework/Resources/Info.plist\"   #>  [3] \"/Library/Frameworks/R.framework/Resources/R\"            #>  [4] \"/Library/Frameworks/R.framework/Resources/Rscript\"      #>  [5] \"/Library/Frameworks/R.framework/Resources/SVN-REVISION\" #>  [6] \"/Library/Frameworks/R.framework/Resources/bin\"          #>  [7] \"/Library/Frameworks/R.framework/Resources/doc\"          #>  [8] \"/Library/Frameworks/R.framework/Resources/etc\"          #>  [9] \"/Library/Frameworks/R.framework/Resources/fontconfig\"   #> [10] \"/Library/Frameworks/R.framework/Resources/include\"      #> [11] \"/Library/Frameworks/R.framework/Resources/lib\"          #> [12] \"/Library/Frameworks/R.framework/Resources/library\"      #> [13] \"/Library/Frameworks/R.framework/Resources/man1\"         #> [14] \"/Library/Frameworks/R.framework/Resources/modules\"      #> [15] \"/Library/Frameworks/R.framework/Resources/share\"        #> [16] \"/Library/Frameworks/R.framework/Resources/tests\"        listFiles(R.home(), pattern='README') #> character(0)"},{"path":"/reference/longRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the longest run of a particular value in a numeric vector — longRun","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"function returns lengh longest run particular numeric value numeric vector.  \"run\" uninterrupted  sequence number. Runs can \"wrapped\" sequence starts ends target value considered consecutive run.","code":""},{"path":"/reference/longRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"longRun(x, val, wrap = FALSE, na.rm = FALSE)"},{"path":"/reference/longRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"x Numeric vector. val Numeric. Value elements x calculate length longest run. wrap Logical. TRUE runs can \"wrap\" end x start x first last elements x equal val. na.rm Logical. TRUE remove NAs first.","code":""},{"path":"/reference/longRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"Integer.","code":""},{"path":[]},{"path":"/reference/longRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"x <- c(1, 1, 1, 2, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1) longRun(x, 2) #> [1] 2 longRun(x, 1) #> [1] 5 longRun(x, 1, wrap=TRUE) #> [1] 8"},{"path":"/reference/maxRuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum number of continuous ","title":"Maximum number of continuous ","text":"Consider ordered set values, say 1, 4, 0, 0, 0, 2, 0, 10. can ask, number times zeroes appear successively? example, one set three continuous zeros, one set single zero. number runs zero 2, maximum run length 3. function calculates number runs based certain condition defining run. condition stated function returns logical value. function example function(x) x == 0.","code":""},{"path":"/reference/maxRuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum number of continuous ","text":"","code":"maxRuns(x, fx, args = NULL, failIfAllNA = FALSE)"},{"path":"/reference/maxRuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum number of continuous ","text":"x Vector numeric, character, values. fx function returns TRUE, FALSE, (optionally) NA. function must use x first argument. example, function(x) x == 0 allowable, function(y) y == 0 . Values count TRUE counted toward run. args list object additional arguments supply function fx. failIfAllNA TRUE, fail values NA evaluated fx.","code":""},{"path":"/reference/maxRuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum number of continuous ","text":"Lengths successive runs elements meet criterion. single value 0 indicates conditions meet criterion.","code":""},{"path":"/reference/maxRuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum number of continuous ","text":"","code":"x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x) x == 0 maxRuns(x, fx) #> [1] 3  fx <- function(x) x > 0 maxRuns(x, fx) #> [1] 2   fx <- function(x) x > 0 & x < 5 maxRuns(x, fx) #> [1] 2  x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x, th) x == th maxRuns(x, fx, args=list(th=0)) #> [1] 3  # \"count\" NA as an observation  x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), FALSE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 3   # include NAs as part of a run x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), TRUE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 5"},{"path":"/reference/memUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of objects taking most memory use — memUse","title":"Size of objects taking most memory use — memUse","text":"Displays largest objects memUse.","code":""},{"path":"/reference/memUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse(   n = 10,   orderBy = \"size\",   decreasing = TRUE,   pos = 1,   display = TRUE,   ... )"},{"path":"/reference/memUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of objects taking most memory use — memUse","text":"n Positive integer, maximum number objects display. orderBy Either 'size' (default) 'name'. decreasing Logical, TRUE (default), objects displayed largest smallest. pos Environment obtain size objects. Default 1. See ls.#\" display TRUE (default), print table memUse used. ... arguments pass ls.","code":""},{"path":"/reference/memUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of objects taking most memory use — memUse","text":"Data frame (invisible).","code":""},{"path":"/reference/memUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse() #>            size #> domLeap    3648 #> domNonLeap 3648 #> doyLeap    3648 #> doyNonLeap 3648 memUse(3) #>            size #> domLeap    3648 #> domNonLeap 3648 #> doyLeap    3648"},{"path":"/reference/mergeLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two lists with precedence — mergeLists","title":"Merge two lists with precedence — mergeLists","text":"function merges two lists create single, combined list. conflict (e.g., two elements name), items second list gain preference. Adapted Stack Overflow (http://stackoverflow.com/questions/13811501/r-merge-lists--overwrite--recursion).","code":""},{"path":"/reference/mergeLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two lists with precedence — mergeLists","text":"","code":"mergeLists(list1, list2)"},{"path":"/reference/mergeLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two lists with precedence — mergeLists","text":"list1 List object. list2 List object.","code":""},{"path":"/reference/mergeLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two lists with precedence — mergeLists","text":"List object.","code":""},{"path":"/reference/mergeLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two lists with precedence — mergeLists","text":"","code":"list1 <- list(a=1:3, b='Hello world', c=LETTERS[1:3]) list2 <- list(x=4, b='Goodbye world', z=letters[1:2]) mergeLists(list1, list2) #> $x #> [1] 4 #>  #> $b #> [1] \"Goodbye world\" #>  #> $z #> [1] \"a\" \"b\" #>  #> $a #> [1] 1 2 3 #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  mergeLists(list2, list1) #> $a #> [1] 1 2 3 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  #> $x #> [1] 4 #>  #> $z #> [1] \"a\" \"b\" #>  list3 <- list(m=list(n=4:7, o=pi), a=1:5) mergeLists(list1, list3) #> $m #> $m$n #> [1] 4 5 6 7 #>  #> $m$o #> [1] 3.141593 #>  #>  #> $a #> [1] 1 2 3 4 5 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>"},{"path":"/reference/mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip an object — mirror","title":"Flip an object — mirror","text":"function creates \"mirror\" image character string, number, matrix, data frame. example \"Shots exchanged hospital\" becomes \"latipsoh eht ta degnahcxe erew stohS' 3.14159 becomes 95141.3. Data frames matrices returned order columns order rows reversed.","code":""},{"path":"/reference/mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip an object — mirror","text":"","code":"mirror(x, direction = \"lr\")"},{"path":"/reference/mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip an object — mirror","text":"x Numeric character, vector numeric character values, matrix data frame. direction used x matrix data frame. Accepted values 'lr' (left-right mirror) 'ud' (-mirror).","code":""},{"path":"/reference/mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip an object — mirror","text":"Object class x.","code":""},{"path":"/reference/mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip an object — mirror","text":"","code":"x <- 'Shots were exchanged at the hospital' mirror(x) #> [1] \"latipsoh eht ta degnahcxe erew stohS\"  x <- c('Water', 'water', 'everywhere') mirror(x) #> [1] \"retaW\"      \"retaw\"      \"erehwyreve\"  # last value will return NA because the exponentiation does not  # make sense when written backwards x <- c(3.14159, 2.71828, 6.02214076e+23)  mirror(x) #> Warning: NAs introduced by coercion #> [1] 95141.3 82817.2      NA x <- data.frame(x=1:5, y=6:10) mirror(x) #>    y x #> 1  6 1 #> 2  7 2 #> 3  8 3 #> 4  9 4 #> 5 10 5  x <- matrix(1:10, nrow=2) mirror(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9    7    5    3    1 #> [2,]   10    8    6    4    2 #> attr(,\"class\") #> [1] \"matrix\" \"array\""},{"path":"/reference/mmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal value(s) — mmode","title":"Modal value(s) — mmode","text":"Modal value. one unique mode, modal values returned.","code":""},{"path":"/reference/mmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal value(s) — mmode","text":"","code":"mmode(x)"},{"path":"/reference/mmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal value(s) — mmode","text":"x Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal value(s) — mmode","text":"Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal value(s) — mmode","text":"","code":"x <- c(1, 2, 3, 3, 4, 5, 3, 1, 2) mmode(x) #> [1] 3  x <- c(1, 2, 3) mmode(x) #> [1] 1 2 3"},{"path":"/reference/naCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"function set operators perform simple (vectorized) comparisons using <, <=, >, >=, !=, == values always returns TRUE FALSE. TRUE occurs condition can evaluated TRUE. FALSE returned condition FALSE evaluated.","code":""},{"path":"/reference/naCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare(op, x, y)  x %<na% y  x %<=na% y  x %==na% y  x %!=na% y  x %>na% y  x %>=na% y"},{"path":"/reference/naCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"op Character, operation perform: '<', '<=', '>', '>=', '!=', '=='. Note must character (.e., put quotes). x, y Vectors numeric, character, NA, /NaN values. first value operation x XXX y XXX operator op. x shorter y x recycled.","code":""},{"path":"/reference/naCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"Vector logical values.","code":""},{"path":"/reference/naCompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare('<', c(1, 2, NA), c(10, 1, 0)) #> [1]  TRUE FALSE FALSE naCompare('<', c(1, 2, NA), 10) #> [1]  TRUE  TRUE FALSE naCompare('<', c(1, 2, NA), NA) #> [1] FALSE FALSE FALSE # compare to: NA < 5 #> [1] NA NA < NA #> [1] NA  # same operations with operators: 1 %<na% 2 #> [1] TRUE 1 %<na% NA #> [1] FALSE 3 %==na% 3 #> [1] TRUE NA %==na% 3 #> [1] FALSE 4 %!=na% 4 #> [1] FALSE 4 %!=na% NA #> [1] FALSE 5 %>=na% 3 #> [1] TRUE 5 %>=na% NA #> [1] FALSE 3 %==na% c(NA, 1, 2, 3, 4) #> [1] FALSE FALSE FALSE  TRUE FALSE  # compare to: 1 < 2 #> [1] TRUE 1 < NA #> [1] NA 3 == 3 #> [1] TRUE NA == 3 #> [1] NA 4 != 4 #> [1] FALSE 4 != NA #> [1] NA 5 >= 3 #> [1] TRUE 5 >= NA #> [1] NA 3 == c(NA, 1, 2, 3, 4) #> [1]    NA FALSE FALSE  TRUE FALSE"},{"path":"/reference/naOmitMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from one or more equal-length vectors — naOmitMulti","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"function removes elements one equal-length vectors one NA position. example, three vectors , B, C, NA first position C NA third position, , B, C elements positions 1 3 removed.","code":""},{"path":"/reference/naOmitMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"naOmitMulti(...)"},{"path":"/reference/naOmitMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"... Vectors (numeric character).","code":""},{"path":"/reference/naOmitMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"List objects class ....","code":""},{"path":[]},{"path":"/reference/naOmitMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"a <- c(NA, 'b', 'c', 'd', 'e', NA) b <- c(1, 2, 3, NA, 5, NA) c <- c(6, 7, 8, 9, 10, NA) naOmitMulti(a, b, c) #> [[1]] #> [1] \"b\" \"c\" \"e\" #>  #> [[2]] #> [1] 2 3 5 #>  #> [[3]] #> [1]  7  8 10 #>"},{"path":"/reference/naRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of rows in a data frame or matrix that contain at least one NA — naRows","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"function returns row number row data frame matrix least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/naRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"naRows(x, inf = FALSE, inverse = FALSE)"},{"path":"/reference/naRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"x Data frame matrix. inf Logical, TRUE also return row numbers rows least one element Inf -Inf. default FALSE. inverse Logical, TRUE return row numbers rows NAs (possibly Inf -Inf).  default FALSE.","code":""},{"path":"/reference/naRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"Integer vector.","code":""},{"path":"/reference/naRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"x <- data.frame(a=1:5, b=c(1, 2, NA, 4, 5), c=c('a', 'b', 'c', 'd', NA)) naRows(x) #> [1] 3 5"},{"path":"/reference/omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"omnibus: Fantabulous helper functions — omnibus","title":"omnibus: Fantabulous helper functions — omnibus","text":"package contains set helper functions.","code":""},{"path":"/reference/omnibus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"omnibus: Fantabulous helper functions — omnibus","text":"Create issue GitHub.","code":""},{"path":"/reference/omnibus.html","id":"data-manipulation","dir":"Reference","previous_headings":"","what":"Data manipulation","title":"omnibus: Fantabulous helper functions — omnibus","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. maxRuns: Maximum number continuous \"runs\" values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). mergeLists: Merge lists. renumSeq: Renumber sequence. rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/reference/omnibus.html","id":"dates","dir":"Reference","previous_headings":"","what":"Dates","title":"omnibus: Fantabulous helper functions — omnibus","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year?  yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/reference/omnibus.html","id":"geometry","dir":"Reference","previous_headings":"","what":"Geometry","title":"omnibus: Fantabulous helper functions — omnibus","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/reference/omnibus.html","id":"handling-nas","dir":"Reference","previous_headings":"","what":"Handling NAs","title":"omnibus: Fantabulous helper functions — omnibus","text":"%<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/omnibus.html","id":"data-properties","dir":"Reference","previous_headings":"","what":"Data properties","title":"omnibus: Fantabulous helper functions — omnibus","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax, .min pmin (vectorized .max .min).","code":""},{"path":"/reference/omnibus.html","id":"system","dir":"Reference","previous_headings":"","what":"System","title":"omnibus: Fantabulous helper functions — omnibus","text":"dirCreate: Nicer version dir.create. eps: Smallest floating point value computer can think . listFiles: Nicer version list.files. memUse: Display largest objects memory.","code":""},{"path":"/reference/omnibus.html","id":"text","dir":"Reference","previous_headings":"","what":"Text","title":"omnibus: Fantabulous helper functions — omnibus","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 --> 007). say: Replacement print('abc'); flush.console.","code":""},{"path":"/reference/omnibus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omnibus: Fantabulous helper functions — omnibus","text":"Adam B. Smith","code":""},{"path":"/reference/pairDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise distances between two matrices or data frames. — pairDist","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"function takes two data frames matrices returns matrix pairwise Euclidean distances two.","code":""},{"path":"/reference/pairDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"pairDist(x1, x2 = NULL, na.rm = FALSE)"},{"path":"/reference/pairDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"x1 Data frame matrix one columns wide. x2 Data frame matrix one columns wide. NULL, pairwise distances points x1 calculated. na.rm Logical, TRUE rows x1 x2 least one NA removed first.","code":""},{"path":"/reference/pairDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"Matrix nrow(x1) rows nrow(x2) columns. Values distance row x1 row x2.","code":""},{"path":[]},{"path":"/reference/pairDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"x1 <- data.frame(x=sample(1:30, 30), y=sort(round(100 * rnorm(30))), z=sample(1:30, 30)) x2 <- data.frame(x=1:20, y=round(100 * rnorm(20)), z=sample(1:20, 20)) pairDist(x1, x2) #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 449.1392 190.59381 312.40999  56.15158 239.21747 138.20999  40.01250 #>  [2,] 404.6356 147.11220 268.16786  19.51922 194.93845  94.41398  25.35744 #>  [3,] 399.0138 142.42893 262.88020  21.79449 189.68658  89.78864  33.95585 #>  [4,] 367.5037 109.49429 230.63608  32.12476 157.76565  58.14637  47.89572 #>  [5,] 365.5475 108.68763 229.37524  31.01612 156.21140  56.54202  54.91812 #>  [6,] 323.2785  66.15890 186.81809  70.24244 113.55175  14.45683  91.78235 #>  [7,] 314.3644  57.07013 177.61475  80.06248 104.58489  10.63015  99.72963 #>  [8,] 313.6782  58.82176 177.58941  81.12336 104.47488  14.56022 102.63040 #>  [9,] 306.2336  53.60037 170.14406  91.23596  97.82638  22.82542 110.57124 #> [10,] 302.0828  43.70355 165.18475  91.28527  92.04890   9.69536 111.22500 #> [11,] 297.6054  48.85693 162.11416 100.34939  90.08885  28.89637 120.55704 #> [12,] 296.8046  42.10701 160.13432  99.50879  87.94316  24.10394 117.95762 #> [13,] 293.1706  35.39774 156.28500 100.48881  83.22259  19.10497 120.21647 #> [14,] 285.4856  31.84337 149.14423 108.57716  76.08548  27.96426 129.12397 #> [15,] 283.1572  25.01999 146.12324 110.76552  73.35530  29.56349 130.01923 #> [16,] 273.3295  20.42058 136.81009 120.34118  63.70243  38.69108 140.64139 #> [17,] 262.1793  27.53180 127.07478 133.18033  55.39856  53.34791 154.36645 #> [18,] 245.9797  36.52396 112.09817 150.98675  43.78356  71.42829 171.98546 #> [19,] 240.3560  35.05710 106.15555 155.03548  37.06751  74.70609 176.47096 #> [20,] 225.3220  36.93237  89.23004 168.11008  17.29162  86.18585 188.54442 #> [21,] 220.3475  46.82948  85.37564 175.28833  22.13594  93.94147 195.08972 #> [22,] 219.8750  50.80354  86.31918 176.51629  25.96151  95.65041 196.94162 #> [23,] 217.1198  47.94789  81.59044 178.19652  19.07878  96.63850 197.71191 #> [24,] 200.0250  63.32456  65.05382 194.78450  19.51922 113.00442 214.64622 #> [25,] 177.1638  82.75869  41.77320 216.00000  33.55592 134.04850 236.37682 #> [26,] 176.0568  83.07828  39.16631 217.18886  34.13210 135.13697 237.04219 #> [27,] 158.9906 103.23759  30.56141 235.22117  54.41507 153.55129 256.03711 #> [28,] 151.3407 115.88788  35.01428 246.32296  67.94851 164.94241 266.83516 #> [29,] 143.0280 122.24974  27.18455 254.57023  74.49832 172.86122 273.97445 #> [30,] 115.4383 144.67895  26.64583 278.02338  95.47251 196.13261 298.47110 #>            [,8]      [,9]      [,10]     [,11]     [,12]     [,13]      [,14] #>  [1,] 287.38476 167.10775 145.389133  93.34881 294.15302 107.58253 131.464824 #>  [2,] 242.87445 122.39690 101.034648  48.60041 249.17062  62.84903  86.238043 #>  [3,] 237.57525 116.94871  96.322375  43.90900 243.50359  58.54912  81.049368 #>  [4,] 205.35092  86.84469  64.070274  20.66398 212.43587  27.47726  51.048996 #>  [5,] 204.41869  83.86895  63.960926  15.65248 210.63001  29.47881  49.779514 #>  [6,] 161.70034  41.06093  21.236761  33.24154 168.12198  20.80865   8.831761 #>  [7,] 152.29248  33.97058  11.704700  43.46263 159.16344  28.44293   9.165151 #>  [8,] 152.30890  31.79623  16.309506  43.28972 158.21504  30.69202   7.810250 #>  [9,] 144.61328  30.43025  18.138357  54.21254 150.88075  39.93745  19.748418 #> [10,] 140.05713  22.38303   3.464102  55.19058 147.22092  40.62019  19.313208 #> [11,] 136.57599  24.49490  22.912878  62.64982 142.10911  49.20366  26.795522 #> [12,] 134.76275  25.57342  17.000000  63.60031 142.04577  48.38388  28.354894 #> [13,] 131.06868  15.68439  11.445523  64.13267 138.23531  49.40648  27.092434 #> [14,] 123.78207   7.00000  20.542639  71.17584 130.03846  57.11392  33.030289 #> [15,] 121.02066  16.03122  22.494444  74.98000 128.69343  60.14981  38.405729 #> [16,] 111.47645  11.04536  31.288976  83.24062 118.02118  69.00000  45.188494 #> [17,] 101.81356  23.85372  46.411206  95.44632 106.68646  82.13404  57.784081 #> [18,]  86.92526  42.05948  64.187226 113.11057  90.74139  99.74969  75.478474 #> [19,]  81.36953  44.74371  68.036755 117.52021  85.32878 104.39828  80.087452 #> [20,]  63.98437  57.08765  79.158070 131.06487  70.02857 117.05554  93.107465 #> [21,]  59.89157  65.37584  86.319175 137.94564  65.42935 123.60016  99.789779 #> [22,]  61.22908  66.28725  88.164619 138.82723  64.81512 124.93598 100.796825 #> [23,]  56.08030  68.52737  89.044932 141.11343  62.63386 126.58989 102.985436 #> [24,]  39.67367  84.24369 105.574618 157.57538  45.18849 143.25502 119.411055 #> [25,]  18.46619 105.19506 127.204560 179.20658  23.43075 165.24830 141.385996 #> [26,]  14.35270 106.86908 128.195164 180.64329  24.28992 166.38510 142.790056 #> [27,]  20.49390 124.18132 146.724231 198.12622  11.22497 184.46138 160.352736 #> [28,]  31.59114 135.38464 157.638828 208.70074  19.33908 194.87432 170.683918 #> [29,]  31.12876 144.32602 165.363237 217.42355  26.32489 202.96059 179.265167 #> [30,]  49.13247 167.14963 189.298706 241.17628  41.27953 227.30156 203.354370 #>           [,15]      [,16]     [,17]      [,18]     [,19]      [,20] #>  [1,] 204.44070  85.475143  21.35416 240.819434 264.75649 231.633331 #>  [2,] 159.34240  41.158231  61.30253 195.739623 219.58597 186.021504 #>  [3,] 153.99351  38.704005  68.27884 190.520340 214.23819 180.227634 #>  [4,] 122.36421   6.708204  98.77753 158.015822 182.01374 149.856598 #>  [5,] 121.74153  23.430749 101.86756 158.458196 182.11260 148.388005 #>  [6,]  78.72103  44.102154 142.38329 115.381974 139.12944 105.806427 #>  [7,]  69.07243  51.000000 151.16547 105.095195 129.06975  96.710909 #>  [8,]  68.89122  53.888774 152.19067 105.621967 129.22074  95.236548 #>  [9,]  61.39218  61.261734 160.42755  96.772930 120.48651  87.732548 #> [10,]  57.56735  63.513778 163.44418  93.584187 117.53297  85.697141 #> [11,]  53.48832  71.070388 169.47271  88.966286 112.32542  78.517514 #> [12,]  52.64029  69.720872 169.73803  87.183714 111.15305  80.305666 #> [13,]  48.42520  72.201108 172.33978  84.314886 108.30051  76.648549 #> [14,]  40.19950  80.311892 180.01111  76.850504 100.57833  67.305275 #> [15,]  39.74921  82.595399 182.71289  74.605630  98.59006  68.337398 #> [16,]  28.08914  92.135769 192.06509  64.691576  88.48164  55.883808 #> [17,]  21.35416 105.385008 204.24495  56.089215  78.61298  43.520110 #> [18,]  18.38478 122.743635 221.43622  42.308392  63.16645  27.495454 #> [19,]  19.20937 127.800626 226.48841  39.509493  59.50630  24.596748 #> [20,]  20.83267 140.256907 240.10414  20.493902  41.97618  13.190906 #> [21,]  27.87472 146.290806 246.18083  13.601471  34.88553  10.344080 #> [22,]  30.51229 147.827602 247.21448  20.024984  36.91883   6.082763 #> [23,]  30.67572 149.194504 249.27294   8.660254  31.25700  14.456832 #> [24,]  46.43275 166.078295 266.09773  11.575837  14.69694  21.494185 #> [25,]  68.91299 188.448932 288.30019  36.069378  18.78829  44.418465 #> [26,]  70.07139 189.362087 289.45811  35.468296  16.67333  47.053161 #> [27,]  88.28363 207.783541 307.30116  55.731499  34.95712  61.741396 #> [28,]  98.60020 217.866932 317.28536  64.822835  42.35564  70.526591 #> [29,] 106.44717 225.514966 325.51958  70.064256  46.42198  80.454956 #> [30,] 130.74402 250.519460 350.32271  96.104110  72.86975 104.604015 pairDist(x1) #>            [,1]       [,2]       [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]   0.00000  47.602521  54.571055  84.90583  84.50444 126.06744 135.92277 #>  [2,]  47.60252   0.000000   9.273618  41.19466  42.83690  81.79853  90.95603 #>  [3,]  54.57105   9.273618   0.000000  39.83717  37.64306  76.60940  86.40023 #>  [4,]  84.90583  41.194660  39.837169   0.00000  29.89983  48.27007  53.38539 #>  [5,]  84.50444  42.836900  37.643060  29.89983   0.00000  43.17407  56.12486 #>  [6,] 126.06744  81.798533  76.609399  48.27007  43.17407   0.00000  16.18641 #>  [7,] 135.92277  90.956033  86.400231  53.38539  56.12486  16.18641   0.00000 #>  [8,] 136.53571  91.093359  85.358069  57.55867  53.74942  12.84523  14.17745 #>  [9,] 146.27713 100.005000  94.968416  63.02381  67.48333  28.53069  15.29706 #> [10,] 147.42456 103.440804  98.883770  66.21933  66.17401  23.72762  14.45683 #> [11,] 155.20631 108.577162 102.883429  73.33485  74.79305  34.84250  24.77902 #> [12,] 155.10964 110.095413 105.815878  71.09149  76.66812  35.74913  20.59126 #> [13,] 156.59183 112.227448 107.577879  74.60563  75.39231  32.55764  21.67948 #> [14,] 164.45060 119.188926 113.815640  83.02409  81.95731  38.94868  29.84962 #> [15,] 166.87720 122.971541 118.549568  84.74078  86.09878  43.50862  32.54228 #> [16,] 176.35476 131.403957 126.162594  94.68896  93.82963  50.71489  41.30375 #> [17,] 188.69022 143.059428 137.047437 108.30051 105.22832  63.19019  55.66866 #> [18,] 206.31529 160.224842 154.084392 125.38341 123.17061  81.30806  72.97260 #> [19,] 210.53503 165.302753 159.157155 130.85870 126.51482  84.86460  77.98718 #> [20,] 224.12943 179.315365 173.798734 142.77605 140.80128  98.12747  89.40358 #> [21,] 231.15579 185.458890 180.002778 148.24979 148.82204 105.84895  95.44632 #> [22,] 232.16158 186.174649 180.313616 150.08664 149.23136 106.72394  97.26253 #> [23,] 234.16447 188.745861 183.491144 151.04304 152.07235 108.96789  98.29547 #> [24,] 250.77480 205.372832 199.914982 168.11008 168.06249 125.11195 115.11299 #> [25,] 272.03125 227.571967 222.015765 190.93454 188.47281 146.11639 137.61541 #> [26,] 273.31667 229.002183 223.731983 191.59071 190.31815 147.67871 138.49549 #> [27,] 291.07731 246.300629 240.403827 210.42101 207.08211 165.07877 157.03821 #> [28,] 302.03642 256.175721 250.159949 220.11588 218.56120 176.24131 167.13168 #> [29,] 310.53985 264.954713 259.539978 227.22236 228.12716 185.13239 174.66539 #> [30,] 334.00299 289.485751 283.763986 252.97628 250.20192 208.06970 199.65220 #>            [,8]      [,9]      [,10]     [,11]     [,12]      [,13]     [,14] #>  [1,] 136.53571 146.27713 147.424557 155.20631 155.10964 156.591826 164.45060 #>  [2,]  91.09336 100.00500 103.440804 108.57716 110.09541 112.227448 119.18893 #>  [3,]  85.35807  94.96842  98.883770 102.88343 105.81588 107.577879 113.81564 #>  [4,]  57.55867  63.02381  66.219333  73.33485  71.09149  74.605630  83.02409 #>  [5,]  53.74942  67.48333  66.174013  74.79305  76.66812  75.392307  81.95731 #>  [6,]  12.84523  28.53069  23.727621  34.84250  35.74913  32.557641  38.94868 #>  [7,]  14.17745  15.29706  14.456832  24.77902  20.59126  21.679483  29.84962 #>  [8,]   0.00000  19.51922  19.544820  22.86919  28.93095  25.787594  28.87906 #>  [9,]  19.51922   0.00000  20.615528  12.08305  15.42725  21.400935  24.18677 #> [10,]  19.54482  20.61553   0.000000  24.91987  16.76305   9.539392  20.04994 #> [11,]  22.86919  12.08305  24.919872   0.00000  20.24846  22.405357  18.24829 #> [12,]  28.93095  15.42725  16.763055  20.24846   0.00000  12.884099  19.87461 #> [13,]  25.78759  21.40093   9.539392  22.40536  12.88410   0.000000  12.68858 #> [14,]  28.87906  24.18677  20.049938  18.24829  19.87461  12.688578   0.00000 #> [15,]  36.95944  30.74085  19.949937  29.88311  18.41195  11.357817  15.36229 #> [16,]  41.24318  35.35534  29.849623  28.87906  27.45906  20.976177  12.52996 #> [17,]  52.17279  47.46578  45.672749  37.48333  43.30127  37.696154  26.07681 #> [18,]  69.89993  63.19019  63.403470  52.84884  58.62593  54.872580  43.65776 #> [19,]  74.35725  70.25667  66.850580  60.31584  64.73021  58.702640  48.17676 #> [20,]  88.45338  82.05486  77.343390  73.66817  73.35530  68.476273  60.21628 #> [21,]  95.39916  86.05812  84.776176  77.62731  77.70457  75.418831  66.94027 #> [22,]  95.77578  87.48714  86.884981  78.06408  80.62258  77.756029  68.08083 #> [23,]  98.88883  89.34204  87.321246  81.43709  80.16234  77.935871  70.17834 #> [24,] 114.95216 106.24971 103.836410  97.84171  97.42176  94.578010  86.41759 #> [25,] 136.66382 130.24592 125.207827 121.74564 121.05371 116.421647 108.57716 #> [26,] 138.47021 131.22119 126.071408 123.29234 121.26417 117.170815 110.00909 #> [27,] 155.20954 149.12076 144.899965 139.96071 140.81548 136.157996 127.56959 #> [28,] 165.52341 157.54047 156.096124 148.09794 150.01667 146.986394 137.81872 #> [29,] 174.88568 165.25738 163.563443 156.92673 156.21780 154.227105 146.35231 #> [30,] 198.45402 191.83587 187.312573 183.02732 182.80317 178.507703 170.49927 #>           [,15]     [,16]     [,17]     [,18]     [,19]     [,20]      [,21] #>  [1,] 166.87720 176.35476 188.69022 206.31529 210.53503 224.12943 231.155792 #>  [2,] 122.97154 131.40396 143.05943 160.22484 165.30275 179.31536 185.458890 #>  [3,] 118.54957 126.16259 137.04744 154.08439 159.15716 173.79873 180.002778 #>  [4,]  84.74078  94.68896 108.30051 125.38341 130.85870 142.77605 148.249789 #>  [5,]  86.09878  93.82963 105.22832 123.17061 126.51482 140.80128 148.822041 #>  [6,]  43.50862  50.71489  63.19019  81.30806  84.86460  98.12747 105.848949 #>  [7,]  32.54228  41.30375  55.66866  72.97260  77.98718  89.40358  95.446320 #>  [8,]  36.95944  41.24318  52.17279  69.89993  74.35725  88.45338  95.399161 #>  [9,]  30.74085  35.35534  47.46578  63.19019  70.25667  82.05486  86.058120 #> [10,]  19.94994  29.84962  45.67275  63.40347  66.85058  77.34339  84.776176 #> [11,]  29.88311  28.87906  37.48333  52.84884  60.31584  73.66817  77.627315 #> [12,]  18.41195  27.45906  43.30127  58.62593  64.73021  73.35530  77.704569 #> [13,]  11.35782  20.97618  37.69615  54.87258  58.70264  68.47627  75.418831 #> [14,]  15.36229  12.52996  26.07681  43.65776  48.17676  60.21628  66.940272 #> [15,]   0.00000  15.39480  33.52611  49.21382  52.23983  59.44746  66.580778 #> [16,]  15.39480   0.00000  18.13836  34.45287  38.02631  48.13523  55.353410 #> [17,]  33.52611  18.13836   0.00000  18.49324  22.91288  38.28838  45.310043 #> [18,]  49.21382  34.45287  18.49324   0.00000  13.15295  26.94439  30.248967 #> [19,]  52.23983  38.02631  22.91288  13.15295   0.00000  20.61553  30.495901 #> [20,]  59.44746  48.13523  38.28838  26.94439  20.61553   0.00000  16.643317 #> [21,]  66.58078  55.35341  45.31004  30.24897  30.49590  16.64332   0.000000 #> [22,]  69.82120  57.07889  44.21538  27.00000  26.79552  18.46619  10.099505 #> [23,]  68.56384  58.29237  49.60847  35.62303  35.01428  18.19341   6.164414 #> [24,]  85.22910  74.49161  64.15606  48.55924  45.61798  28.67054  20.420578 #> [25,] 106.79419  96.42614  85.84288  71.30919  64.52906  48.38388  47.053161 #> [26,] 107.11676  97.65756  88.37420  74.25631  68.13956  50.25933  47.801674 #> [27,] 126.95669 115.73677 103.60502  87.95453  81.44323  67.72001  65.199693 #> [28,] 138.12313 126.35268 113.44602  96.09370  92.36341  79.48585  72.394751 #> [29,] 144.53719 134.45445 123.85072 107.13076 104.18253  88.14193  79.561297 #> [30,] 168.81351 158.43295 147.04421 131.32403 125.07997 110.30866 106.681770 #>           [,22]      [,23]     [,24]      [,25]      [,26]     [,27]     [,28] #>  [1,] 232.16158 234.164472 250.77480 272.031248 273.316666 291.07731 302.03642 #>  [2,] 186.17465 188.745861 205.37283 227.571967 229.002183 246.30063 256.17572 #>  [3,] 180.31362 183.491144 199.91498 222.015765 223.731983 240.40383 250.15995 #>  [4,] 150.08664 151.043040 168.11008 190.934544 191.590710 210.42101 220.11588 #>  [5,] 149.23136 152.072351 168.06249 188.472810 190.318155 207.08211 218.56120 #>  [6,] 106.72394 108.967885 125.11195 146.116392 147.678705 165.07877 176.24131 #>  [7,]  97.26253  98.295473 115.11299 137.615406 138.495487 157.03821 167.13168 #>  [8,]  95.77578  98.888826 114.95216 136.663821 138.470213 155.20954 165.52341 #>  [9,]  87.48714  89.342039 106.24971 130.245921 131.221187 149.12076 157.54047 #> [10,]  86.88498  87.321246 103.83641 125.207827 126.071408 144.89997 156.09612 #> [11,]  78.06408  81.437092  97.84171 121.745636 123.292336 139.96071 148.09794 #> [12,]  80.62258  80.162335  97.42176 121.053707 121.264174 140.81548 150.01667 #> [13,]  77.75603  77.935871  94.57801 116.421647 117.170815 136.15800 146.98639 #> [14,]  68.08083  70.178344  86.41759 108.577162 110.009091 127.56959 137.81872 #> [15,]  69.82120  68.563839  85.22910 106.794195 107.116759 126.95669 138.12313 #> [16,]  57.07889  58.292367  74.49161  96.426138  97.657565 115.73677 126.35268 #> [17,]  44.21538  49.608467  64.15606  85.842880  88.374204 103.60502 113.44602 #> [18,]  27.00000  35.623026  48.55924  71.309186  74.256313  87.95453  96.09370 #> [19,]  26.79552  35.014283  45.61798  64.529063  68.139563  81.44323  92.36341 #> [20,]  18.46619  18.193405  28.67054  48.383882  50.259327  67.72001  79.48585 #> [21,]  10.09950   6.164414  20.42058  47.053161  47.801674  65.19969  72.39475 #> [22,]   0.00000  15.427249  22.51666  47.053161  49.608467  63.31666  70.12132 #> [23,]  15.42725   0.000000  17.57840  44.113490  43.874822  63.06346  70.71775 #> [24,]  22.51666  17.578396   0.00000  28.089144  28.460499  45.84757  53.49766 #> [25,]  47.05316  44.113490  28.08914   0.000000   9.110434  21.56386  38.61347 #> [26,]  49.60847  43.874822  28.46050   9.110434   0.000000  26.19160  40.84116 #> [27,]  63.31666  63.063460  45.84757  21.563859  26.191602   0.00000  23.28089 #> [28,]  70.12132  70.717749  53.49766  38.613469  40.841156  23.28089   0.00000 #> [29,]  80.14986  76.380626  60.09160  46.540305  43.874822  36.61967  23.60085 #> [30,] 105.83478 103.744879  86.40602  62.104750  62.241465  43.74929  42.16634 #>           [,29]     [,30] #>  [1,] 310.53985 334.00299 #>  [2,] 264.95471 289.48575 #>  [3,] 259.53998 283.76399 #>  [4,] 227.22236 252.97628 #>  [5,] 228.12716 250.20192 #>  [6,] 185.13239 208.06970 #>  [7,] 174.66539 199.65220 #>  [8,] 174.88568 198.45402 #>  [9,] 165.25738 191.83587 #> [10,] 163.56344 187.31257 #> [11,] 156.92673 183.02732 #> [12,] 156.21780 182.80317 #> [13,] 154.22711 178.50770 #> [14,] 146.35231 170.49927 #> [15,] 144.53719 168.81351 #> [16,] 134.45445 158.43295 #> [17,] 123.85072 147.04421 #> [18,] 107.13076 131.32403 #> [19,] 104.18253 125.07997 #> [20,]  88.14193 110.30866 #> [21,]  79.56130 106.68177 #> [22,]  80.14986 105.83478 #> [23,]  76.38063 103.74488 #> [24,]  60.09160  86.40602 #> [25,]  46.54031  62.10475 #> [26,]  43.87482  62.24147 #> [27,]  36.61967  43.74929 #> [28,]  23.60085  42.16634 #> [29,]   0.00000  40.06245 #> [30,]  40.06245   0.00000"},{"path":"/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading characters to a string — prefix","title":"Add leading characters to a string — prefix","text":"Add leading characters string. function useful ensuring, say, files get sorted particular order. example, operating systems file name \"file 1\" come first, \"file 10\", \"file 11\", \"file 12\", etc., \"file 2\", \"file 21\", . Using prefix, can add one leading zeros file names \"file 01\", \"file 02\", \"file 03\", ... sort way.","code":""},{"path":"/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading characters to a string — prefix","text":"","code":"prefix(x, len, pad = \"0\")"},{"path":"/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading characters to a string — prefix","text":"x Character character list add prefix. len total number characters desired string. string already length longer nothing prefixed string. pad Character. Symbol prefix string.","code":""},{"path":"/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading characters to a string — prefix","text":"Character character vector.","code":""},{"path":"/reference/prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading characters to a string — prefix","text":"","code":"prefix(1:5, len=2) #> [1] \"01\" \"02\" \"03\" \"04\" \"05\" prefix(1:5, len=5) #> [1] \"00001\" \"00002\" \"00003\" \"00004\" \"00005\" prefix(1:5, len=3, pad='!') #> [1] \"!!1\" \"!!2\" \"!!3\" \"!!4\" \"!!5\""},{"path":"/reference/quadArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Area of a quadrilateral — quadArea","title":"Area of a quadrilateral — quadArea","text":"Calculates area quadrilateral dividing two triangles applying Heron's formula.","code":""},{"path":"/reference/quadArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area of a quadrilateral — quadArea","text":"","code":"quadArea(x, y)"},{"path":"/reference/quadArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area of a quadrilateral — quadArea","text":"x Numeric list. x coordinates quadrilateral. y Numeric list. y coordinates quadrilateral.","code":""},{"path":"/reference/quadArea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area of a quadrilateral — quadArea","text":"Numeric (area quadrilateral units x y.","code":""},{"path":"/reference/quadArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area of a quadrilateral — quadArea","text":"","code":"x <- c(0, 6, 4, 1) y <- c(0, 1, 7, 4) quadArea(x, y) #> [1] 21.24036 plot(1, type='n', xlim=c(0, 7), ylim=c(0, 7), xlab='x', ylab='y') polygon(x, y) text(x, y, LETTERS[1:4], pos=4) lines(x[c(1, 3)], y[c(1, 3)], lty='dashed', col='red')"},{"path":"/reference/renumSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber a sequence of numbers — renumSeq","title":"Renumber a sequence of numbers — renumSeq","text":"function renumbers sequence, helpful \"gaps\" appear sequence. example, consider sequence {1, 1, 3, 1, 8, 8, 8}. function renumber sequence {1, 1, 2, 1, 3, 3, 3}. NAs ignored.","code":""},{"path":"/reference/renumSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"renumSeq(x)"},{"path":"/reference/renumSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber a sequence of numbers — renumSeq","text":"x Vector numerical character values.","code":""},{"path":"/reference/renumSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber a sequence of numbers — renumSeq","text":"vector.","code":""},{"path":[]},{"path":"/reference/renumSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"x <- c(1, 1, 3, 1, 8, 8, 8) renumSeq(x) #> [1] 1 1 2 1 3 3 3  x <- c(1, 1, 3, 1, 8, NA, 8, 8) renumSeq(x) #> [1]  1  1  2  1  3 NA  3  3  y <- c('c', 'c', 'b', 'a', 'w', 'a') renumSeq(y) #> [1] 3 3 2 1 4 1"},{"path":"/reference/rotateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate values in a matrix — rotateMatrix","title":"Rotate values in a matrix — rotateMatrix","text":"function rotates values matrix user-specified number degrees. almost cases values fall outside matrix discarded.  Cells rotated values become NA. square matrices can accommodated. cases rotation cause cells assigned value original values fall within . instances mean value surrounding cells assigned cells missing values. angle rotation small rotation occur.","code":""},{"path":"/reference/rotateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"rotateMatrix(x, rot)"},{"path":"/reference/rotateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate values in a matrix — rotateMatrix","text":"x Object class matrix. rot Numeric. Number degrees rotate matrix. Values represent difference degrees \"north\" () clockwise direction.","code":""},{"path":"/reference/rotateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate values in a matrix — rotateMatrix","text":"matrix.","code":""},{"path":[]},{"path":"/reference/rotateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"x <- matrix(1:100, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100 rotateMatrix(x, 90) # 90 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   10    9    8    7    6    5    4    3    2     1 #>  [2,]   20   19   18   17   16   15   14   13   12    11 #>  [3,]   30   29   28   27   26   25   24   23   22    21 #>  [4,]   40   39   38   37   36   35   34   33   32    31 #>  [5,]   50   49   48   47   46   45   44   43   42    41 #>  [6,]   60   59   58   57   56   55   54   53   52    51 #>  [7,]   70   69   68   67   66   65   64   63   62    61 #>  [8,]   80   79   78   77   76   75   74   73   72    71 #>  [9,]   90   89   88   87   86   85   84   83   82    81 #> [10,]  100   99   98   97   96   95   94   93   92    91 rotateMatrix(x, 180) # 180 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  100   90   80   70   60   50   40   30   20    10 #>  [2,]   99   89   79   69   59   49   39   29   19     9 #>  [3,]   98   88   78   68   58   48   38   28   18     8 #>  [4,]   97   87   77   67   57   47   37   27   17     7 #>  [5,]   96   86   76   66   56   46   36   26   16     6 #>  [6,]   95   85   75   65   55   45   35   25   15     5 #>  [7,]   94   84   74   64   54   44   34   24   14     4 #>  [8,]   93   83   73   63   53   43   33   23   13     3 #>  [9,]   92   82   72   62   52   42   32   22   12     2 #> [10,]   91   81   71   61   51   41   31   21   11     1 rotateMatrix(x, 45) # 45 degrees to the right #>       [,1] [,2] [,3]   [,4]     [,5]   [,6]   [,7] [,8]   [,9] [,10] #>  [1,]   NA   NA    4  3.000 13.00000 22.000 21.000   31     NA    NA #>  [2,]   NA  7.6    5 14.000 19.75000 23.000 32.000   41 47.200    NA #>  [3,]    7  6.0   16 25.000 24.00000 34.000 43.000   52 51.000    61 #>  [4,]    8 17.0   26 27.000 35.00000 44.000 48.500   53 62.000    71 #>  [5,]   19 24.0   27 36.000 44.14286 45.000 54.000   63 68.875    72 #>  [6,]   29 28.0   38 47.000 46.00000 56.000 65.000   74 73.000    83 #>  [7,]   30 39.0   48 52.625 57.00000 66.000 71.875   75 84.000    93 #>  [8,]   40 50.0   59 58.000 68.00000 77.000 76.000   86 95.000    94 #>  [9,]   NA 55.8   60 69.000 78.00000 82.625 87.000   96 93.600    NA #> [10,]   NA   NA   70 80.000 89.00000 88.000 98.000   97     NA    NA rotateMatrix(x, 7) # slight rotation #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   NA   11   21   31   41   51   61   71    81 #>  [2,]    3   12   22   32   42   52   62   72   82    NA #>  [3,]    4   13   23   33   43   53   63   73   83    92 #>  [4,]    5   14   24   34   44   54   64   74   84    93 #>  [5,]    6   15   25   35   45   55   65   75   85    94 #>  [6,]    7   16   26   36   46   56   66   76   86    95 #>  [7,]    8   17   27   37   47   57   67   77   87    96 #>  [8,]    9   18   28   38   48   58   68   78   88    97 #>  [9,]   NA   19   29   39   49   59   69   79   89    98 #> [10,]   20   30   40   50   60   70   80   90   NA    99 rotateMatrix(x, 5) # no rotation because angle is too small #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100"},{"path":"/reference/roundTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to nearest target value — roundTo","title":"Round to nearest target value — roundTo","text":"function rounds value nearest \"target\" value (e.g., round 0.72 nearest 0.25, 0.75).","code":""},{"path":"/reference/roundTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(x, target, roundFx = round)"},{"path":"/reference/roundTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to nearest target value — roundTo","text":"x Numeric. target Numeric. roundFx round, floor, ceiling.","code":""},{"path":"/reference/roundTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to nearest target value — roundTo","text":"Numeric.","code":""},{"path":"/reference/roundTo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(0.73, 0.05) #> [1] 0.75 roundTo(0.73, 0.1) #> [1] 0.7 roundTo(0.73, 0.25) #> [1] 0.75 roundTo(0.73, 0.25, floor) #> [1] 0.5 roundTo(0.73, 1) #> [1] 1 roundTo(0.73, 10) #> [1] 0 roundTo(0.73, 10, ceiling) #> [1] 10"},{"path":"/reference/roundedSigDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of significant digits in rounded numbers — roundedSigDigits","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"function \"examines\" numeric value (typically numbers decimal place) estimates either: number significant digits numerator denominator fraction (approximately) result given value. number digits integer may rounded, depending whether input values decimal place integer. Negative values treated positive values negative number returns value positive version. See Details details. Obviously, values can appear rounded repeating even !","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(x, minReps = 3)"},{"path":"/reference/roundedSigDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"x Numeric numeric vector. minReps Integer. Number times digit sequence digits occur decimal place needs repeated assume represents repeating series thus assumed arise using decimal places represent fraction. Default 3. example, minReps 3 0.111 assumed represent repeating value 1 occurs three times, -1 returned. However, minReps 4 function assume value four digits, next digit 1, returns -3 three values decimal place. penultimate digit >5 last digit equal penultimate digit plus 1, last digit counts repeat penultimate digit.  0.067 assumed two repeating 6s.  minReps 0 1 function (usually) return negative total number decimal places value.","code":""},{"path":"/reference/roundedSigDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"Integer (number digits) NA (appear rounded).","code":""},{"path":"/reference/roundedSigDigits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"values least one non-zero digit decimal place repeated series digits detected, function simply returns total number digits (ignoring trailing zeros) times -1. example: 0.3 returns -1 just one value decimal. 0.34567 returns -5 repeats 5th decimal place. 0.1212125 returns -7 repeats (starting right) 7th decimal place. 0.111117 returns -6 repeats (starting right) 7th decimal place. function takes account rounding : 0.666 might truncated version 2/3. Two three 1 significant digit, function returns -1 (1 value decimal place). 0.667 also returns -1 might represent rounding 2/3 customary round digits next digit >5. 0.3334 returns -4 inappropriate round 3 4 next digit 5 less. Repeating series accounted . example: 0.121212 returns -2 \"12\" starts repeating second decimal place. 0.000678678678 returns -6 \"678\" starts repeating 6th place. 0.678678678 returns -3. 0.678678679 also returns -3 678 rounded 679 next digit 6. Note can set minimum number times digit series needs repeated count repeated using argument minReps. default 3, digits series digits need repeated least 3 times count repetition, can changed: 0.1111 returns -1 using default requirement 3 repetitions -4 number minimum repetitions 5 . 0.121212 returns -2 using default requirement 3 repetitions -6 number minimum repetitions 4 . Trailing zeros ignored, 0.12300 returns -3. values digits decimal place location first non-zero digit right returned positive integer. example: 234 returns 1 first non-zero digit right 1s place. 100 return 3 first non-zero digit right 100s place. 70001 returns 1 first non-zero digit right 1s place. However, note oddities: 4E5 returns 6 4E50 probably return 51 many computers hard time internally representing numbers large. 4E-5 returns -5  probably return -50 many computers hard time internally representing numbers small. -100 100 return 3 -0.12 0.12 return -2 negative sign ignored. 0 returns 0. NA NaN returns NA.","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(0.3) #> [1] -1 roundedSigDigits(0.34567) #> [1] -5 roundedSigDigits(0.1212125) #> [1] -7 roundedSigDigits(0.111117) #> [1] -6 roundedSigDigits(0.666) #> [1] -1 roundedSigDigits(0.667) #> [1] -1 roundedSigDigits(0.3334) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.000678678678) #> [1] -6 roundedSigDigits(0.678678678) #> [1] -3 roundedSigDigits(0.678678679) #> [1] -3 roundedSigDigits(0.1111) #> [1] -1 roundedSigDigits(0.1111, minReps=5) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.121212, minReps=4) #> [1] -6 roundedSigDigits(234) #> [1] 1 roundedSigDigits(100) #> [1] 3 roundedSigDigits(70001) #> [1] 1 roundedSigDigits(4E5) #> [1] 1 roundedSigDigits(4E50) #> [1] 2 roundedSigDigits(4E-5) #> [1] 1 roundedSigDigits(4E-50) #> [1] 2 roundedSigDigits(0) #> [1] 0 roundedSigDigits(NA) #> [1] NA  x <- c(0.0667, 0.0667, 0.067) roundedSigDigits(x) #> [1] -2 -2 -3"},{"path":"/reference/rowColIndexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between row- and column-style indexing of matrices — rowColIndexing","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"functions converts index values cells row- column-style indexing cells matrices. Column indexing (default matrices) cell \"1\" upper left corner matrix. cell \"2\" , . numbering wraps around top next column. Row indexing (default rasters, example), also cell \"1\" upper left, cell \"2\" right, . Numbering wraps around next row.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"rowColIndexing(x, cell, dir)"},{"path":"/reference/rowColIndexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"x Either matrix, vector two values, one number rows one number columns matrix. cell One cell indices (positive integers). dir \"direction\" convert. 'row', assumed cell column-style index converted row-style index. 'col', assumed cell row-style index converted column-style index.","code":""},{"path":"/reference/rowColIndexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"One positive integers.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"# column versus row indexing colIndex <- matrix(1:40, nrow=5, ncol=8) rowIndex <- matrix(1:40, nrow=5, ncol=8, byrow=TRUE) colIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    6   11   16   21   26   31   36 #> [2,]    2    7   12   17   22   27   32   37 #> [3,]    3    8   13   18   23   28   33   38 #> [4,]    4    9   14   19   24   29   34   39 #> [5,]    5   10   15   20   25   30   35   40 rowIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40  # examples x <- matrix('a', nrow=5, ncol=8, byrow=TRUE) rowColIndexing(x, cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(x, cell=c(1, 6, 20), 'col') #> [1]  1 26 18  rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'col') #> [1]  1 26 18"},{"path":"/reference/say.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer version of print() or cat() function — say","title":"Nicer version of print() or cat() function — say","text":"function nicer version print() cat(), especially used inline functions displays immediately pastes strings together. also rudimentary optional word wrapping.","code":""},{"path":"/reference/say.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer version of print() or cat() function — say","text":"","code":"say(   ...,   pre = 0,   post = 1,   breaks = NULL,   wiggle = 10,   preBreak = 1,   level = NULL,   deco = \"#\" )"},{"path":"/reference/say.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nicer version of print() or cat() function — say","text":"... character strings print pre Integer >= 0.  Number blank lines print strings post Integer >= 0. Number blank lines print strings breaks Either NULL, causes strings printed line (wrap overflow) positive integer wraps lines character length (e.g., breaks=80 inserts line breaks every 80 characters). wiggle Integer >- 0.  Allows line overrun breaks length characters inserting line breaks. preBreak wrapping long lines indicates subsequent lines indented. NULL causes lines printed starting column 1 display device. positive integer inserts preBreak number spaces printing line. string causes line start string. level Integer NULL. NULL, items ... displayed -. Otherwise, value 1, 2, 3 indicates teh heading level, lower numbers causing decoration spacing used. deco Character. Character decorate text level NULL.","code":""},{"path":"/reference/say.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nicer version of print() or cat() function — say","text":"Nothing (side effect output display device).","code":""},{"path":"/reference/say.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nicer version of print() or cat() function — say","text":"","code":"say('The quick brown fox ', 'jumps over the lazy ', 'Susan.') #>  The quick brown fox jumps over the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', breaks=10) #>  The quick  #>  brown fox  #>  jumps over #>   the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=1) #>  #>  ######################################################  #>  ### The quick brown fox jumps over the lazy Susan. ### #>  ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=2) #>  #>     ### The quick brown fox jumps over the lazy Susan. ### #>     ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=3) #>  #>        ### The quick brown fox jumps over the lazy Susan.  #>"},{"path":"/reference/stretchMinMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale values — stretchMinMax","title":"Rescale values — stretchMinMax","text":"function rescales vector numeric values arbitrary range. Optionally, stretch values equal lowest value can \"nudged\" slightly higher half minimum value across rescaled vector values > 0.","code":""},{"path":"/reference/stretchMinMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale values — stretchMinMax","text":"","code":"stretchMinMax(   x,   lower = 0,   upper = 1,   nudgeUp = FALSE,   nudgeDown = FALSE,   na.rm = FALSE )"},{"path":"/reference/stretchMinMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale values — stretchMinMax","text":"x Numeric list. lower Numeric, low end range stretch. upper Numeric, high end range stretch. nudgeUp, nudgeDown Logical, FALSE (default) nothing. TRUE ** rescaling [0, 1], small value added values x equal 0. value equal 0.5 * min(x[x > 0]). na.rm Logical, FALSE (default) values x NA returned value NA. TRUE NA's ignored calculation.","code":""},{"path":"/reference/stretchMinMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale values — stretchMinMax","text":"Numeric value.","code":""},{"path":[]},{"path":"/reference/stretchMinMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale values — stretchMinMax","text":"","code":"x <- 1:10 stretchMinMax(x) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 1.0000000 stretchMinMax(x, lower=2, upper=5) #>  [1] 2.000000 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeUp=TRUE) #>  [1] 0.05555556 0.11111111 0.22222222 0.33333333 0.44444444 0.55555556 #>  [7] 0.66666667 0.77777778 0.88888889 1.00000000 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeDown=TRUE) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 0.9444444 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE, nudgeDown=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 4.833333 x <- c(1:5, NA) stretchMinMax(x) #> [1] NA NA NA NA NA NA stretchMinMax(x, na.rm=TRUE) #> [1] 0.00 0.25 0.50 0.75 1.00   NA"},{"path":"/reference/which.pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Which vector has maximum value at each element — which.pmax","title":"Which vector has maximum value at each element — which.pmax","text":"functions vectorized versions .max .min, return index value maximum minimum (first maximum/minimum value, tie). case, function supplied two vectors length. element position (e.g., first element vector, second element, etc.) function returns integer indicating vector highest lowest value (index first vector highest lowest value case ties).","code":""},{"path":"/reference/which.pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"which.pmax(..., na.rm = TRUE)  which.pmin(..., na.rm = TRUE)"},{"path":"/reference/which.pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which vector has maximum value at each element — which.pmax","text":"... Two vectors. lengths match, results likely unanticipated. na.rm Logical, FALSE vectors contains NA NaN, function return NA. TRUE (default), NA returned elements position NA NaN.","code":""},{"path":"/reference/which.pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which vector has maximum value at each element — which.pmax","text":"Vector length input, numeric values indicating vector highest value position. case ties, index first vector returned.","code":""},{"path":"/reference/which.pmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Which vector has maximum value at each element — which.pmax","text":".pmin(): vector minimum value element","code":""},{"path":[]},{"path":"/reference/which.pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"set.seed(123) a <- sample(9, 5) b <- sample(9, 5) c <- sample(9, 5) a[2:3] <- NA b[3] <- NA a[6] <- NA b[6] <- NA c[6] <- NA which.pmax(a, b, c) #> [1]  2  2  3  2  1 NA which.pmin(a, b, c) #> [1]  1  2  3  3  2 NA which.pmax(a, b, c, na.rm=FALSE) #> [1]  2 NA NA  2  1 NA which.pmin(a, b, c, na.rm=FALSE) #> [1]  1 NA NA  3  2 NA"},{"path":"/reference/yearFromDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Year from date formats that are possibly ambiguous — yearFromDate","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"function attempts return year characters representing dates formats. formats can ambigous varied within set.  example, returns \"1982\" (9982 century ambigous) \"11/20/82\", \"1982-11-20\", \"Nov. 20, 1982\", \"20 Nov 1982\", \"20-Nov-1982\", \"20/Nov/1982\", \"20 Nov. 82\", \"20 Nov 82\". function handles ambiguous centuries (e.g., 1813, 1913, 2013) including dummy place holder century place (.e., 9913). Note may return warnings like \"NAs introduced coercion\".","code":""},{"path":"/reference/yearFromDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(x, yearLast = TRUE)"},{"path":"/reference/yearFromDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"x Character character list, one dates. yearLast Logical, TRUE assume dates like \"XX/YY/ZZ\" list year last (=ZZ).  FALSE, assume first (=XX).","code":""},{"path":"/reference/yearFromDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"Numeric.","code":""},{"path":"/reference/yearFromDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(1969, yearLast=TRUE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-Jul-1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-19-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-22-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/Jul/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/Jul/1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10/19/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/19/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/22/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 19 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 22 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=TRUE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=TRUE) # --> 2014 #> [1] 2014  yearFromDate(1969, yearLast=FALSE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=FALSE) # --> 9971 #> [1] 9910 yearFromDate('10-Jul-1971', yearLast=FALSE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10-19-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3-22-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/19/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10/19/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3/22/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10 19 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3 22 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=FALSE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=FALSE) # --> 2014 #> [1] 2014"},{"path":"/news/index.html","id":"omnibus-113","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.3","title":"omnibus 1.1.3","text":"o Added insert() o Added renumSeq() o Fixed bug insertCol()","code":""},{"path":"/news/index.html","id":"omnibus-112","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.2","title":"omnibus 1.1.2","text":"CRAN release: 2022-02-15 o Removed clear()","code":""},{"path":"/news/index.html","id":"omnibus-111","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.1","title":"omnibus 1.1.1","text":"o Removed () o Cleaned help o First sumbission CRAN","code":""}]
