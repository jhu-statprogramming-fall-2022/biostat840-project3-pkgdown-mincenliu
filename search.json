[{"path":"/articles/part1c.html","id":"question","dir":"Articles","previous_headings":"","what":"Question","title":"Example analysis","text":"data analysis aims explore college tuition pay graduation relationship.","code":""},{"path":"/articles/part1c.html","id":"original-data","dir":"Articles","previous_headings":"","what":"Original Data","title":"Example analysis","text":"data originally came US Department Education. found data TidyTuesday link GitHub repository https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10. use 2 datasets repository: tuition_cost.csv contains -state -state tuition school salary_potential.csv contains early mid career pay USD students school.","code":""},{"path":"/articles/part1c.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Example analysis","text":"Data dictionaries available : https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#tuition_costcsv, https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-03-10#salary_potentialcsv.","code":""},{"path":"/articles/part1c.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Example analysis","text":"","code":"# tests if a directory named \"data\" exists locally if(!dir.exists(here(\"data\"))) { dir.create(here(\"data\")) }  if(!file.exists(here(\"data\", \"tuition_cost.RData\")) | !file.exists(here(\"data\", \"salary_potential.RData\"))){   tuition_cost <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')   salary_potential <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')      # save the files to RData objects   save(tuition_cost, file = here(\"data\", \"tuition_cost.RData\"))   save(salary_potential, file = here(\"data\", \"salary_potential.RData\")) } tuition_cost <- get(load(here(\"data\", \"tuition_cost.RData\"))) salary_potential <- get(load(here(\"data\", \"salary_potential.RData\"))) glimpse(tuition_cost) #> Rows: 2,973 #> Columns: 10 #> $ name                 <chr> \"Aaniiih Nakoda College\", \"Abilene Christian Univ… #> $ state                <chr> \"Montana\", \"Texas\", \"Georgia\", \"Minnesota\", \"Cali… #> $ state_code           <chr> \"MT\", \"TX\", \"GA\", \"MN\", \"CA\", \"CO\", \"NY\", \"NY\", \"… #> $ type                 <chr> \"Public\", \"Private\", \"Public\", \"For Profit\", \"For… #> $ degree_length        <chr> \"2 Year\", \"4 Year\", \"2 Year\", \"2 Year\", \"4 Year\",… #> $ room_and_board       <dbl> NA, 10350, 8474, NA, 16648, 8782, 16030, 11660, 1… #> $ in_state_tuition     <dbl> 2380, 34850, 4128, 17661, 27810, 9440, 38660, 537… #> $ in_state_total       <dbl> 2380, 45200, 12602, 17661, 44458, 18222, 54690, 1… #> $ out_of_state_tuition <dbl> 2380, 34850, 12550, 17661, 27810, 20456, 38660, 9… #> $ out_of_state_total   <dbl> 2380, 45200, 21024, 17661, 44458, 29238, 54690, 2… glimpse(salary_potential) #> Rows: 935 #> Columns: 7 #> $ rank                      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ name                      <chr> \"Auburn University\", \"University of Alabama … #> $ state_name                <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", … #> $ early_career_pay          <dbl> 54400, 57500, 52300, 54500, 48400, 46600, 49… #> $ mid_career_pay            <dbl> 104500, 103900, 97400, 93500, 90500, 89100, … #> $ make_world_better_percent <dbl> 51, 59, 50, 61, 52, 53, 48, 57, 56, 58, 60, … #> $ stem_percent              <dbl> 31, 45, 15, 30, 3, 12, 27, 17, 17, 20, 8, 7,…"},{"path":"/articles/part1c.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data Wrangling","title":"Example analysis","text":"Luckily, don’t missing values. , see possible difference 2 columns caused dash values “state_name”. ’re going check . remove 4 observations inconsistent information. keep 4-year schools. want find modal value(s) percent student body STEM: can see modes 0 7.","code":"# We first combine the 2 data frames. We include only schools that are in both data frames. combined <- inner_join(tuition_cost, salary_potential, by = \"name\") # Remove unwanted variables combined <- combined %>% select(-room_and_board, -in_state_total, -out_of_state_total, -rank, -make_world_better_percent)  # Check if there's any NAs. If missing values exist, get the corresponding row numbers. naRows(combined) #> integer(0) # We want to check whether there's any discrepancy between the \"state\" variables from the 2 data frames. temp <- map2(.x = combined$state, .y = combined$state_name, .f = ~str_equal(.x, .y))  # Save the index of not matched cases ind <- which(temp == FALSE)  combined %>% slice(ind) %>% select(state, state_name) #> # A tibble: 135 × 2 #>    state          state_name     #>    <chr>          <chr>          #>  1 New York       New-York       #>  2 North Carolina North-Carolina #>  3 South Dakota   South-Dakota   #>  4 New York       New-York       #>  5 North Carolina North-Carolina #>  6 North Carolina North-Carolina #>  7 South Carolina South-Carolina #>  8 South Dakota   South-Dakota   #>  9 New Jersey     New-Jersey     #> 10 West Virginia  West-Virginia  #> # … with 125 more rows # Replace \"-\" with \" \" combined$state_name <- str_replace(combined$state_name, \"-\", \" \") temp2 <- pmap(list(x = combined$state, y = combined$state_name),               .f = ~str_equal(..1, ..2)) ind2 <- which(temp2 == FALSE) combined %>% slice(ind2) %>% select(name, state, state_code, state_name) #> # A tibble: 4 × 4 #>   name                 state      state_code state_name #>   <chr>                <chr>      <chr>      <chr>      #> 1 Northwestern College Illinois   IL         Iowa       #> 2 St. John's College   Illinois   IL         Maryland   #> 3 St. John's College   New Mexico NM         Maryland   #> 4 Sterling College     Vermont    VT         Kansas combined <- combined %>% slice(-ind2) %>% select(-state_name) combined #> # A tibble: 724 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 714 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent combined %>% count(degree_length) #> # A tibble: 2 × 2 #>   degree_length     n #>   <chr>         <int> #> 1 2 Year            3 #> 2 4 Year          721 combined <- combined %>% filter(degree_length == \"4 Year\") combined #> # A tibble: 721 × 10 #>    name      state state…¹ type  degre…² in_st…³ out_o…⁴ early…⁵ mid_c…⁶ stem_…⁷ #>    <chr>     <chr> <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 Adams St… Colo… CO      Publ… 4 Year     9440   20456   44400   81400       3 #>  2 Adventis… Flor… FL      Priv… 4 Year    15150   15150   51600   89800       5 #>  3 Agnes Sc… Geor… GA      Priv… 4 Year    41160   41160   46000   83600      26 #>  4 Alabama … Alab… AL      Publ… 4 Year    11068   19396   39800   71500      16 #>  5 Alaska P… Alas… AK      Priv… 4 Year    20830   20830   50300   90000       6 #>  6 Albany C… New … NY      Priv… 4 Year    35105   35105   81000  144800       2 #>  7 Albertus… Conn… CT      Priv… 4 Year    32060   32060   49700   85900       2 #>  8 Albion C… Mich… MI      Priv… 4 Year    45775   45775   52100   99300      23 #>  9 Alcorn S… Miss… MS      Publ… 4 Year     7144    7144   40900   69500      19 #> 10 Allen Co… Iowa  IA      Priv… 4 Year    19970   19970   51600   91300       0 #> # … with 711 more rows, and abbreviated variable names ¹​state_code, #> #   ²​degree_length, ³​in_state_tuition, ⁴​out_of_state_tuition, #> #   ⁵​early_career_pay, ⁶​mid_career_pay, ⁷​stem_percent mmode(combined$stem_percent) #> [1] 0 7"},{"path":"/articles/part1c.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data Visualization","title":"Example analysis","text":"Plot 1  Plot 2  Plot 3","code":"combined %>% ggplot(aes(x = type, y = out_of_state_tuition)) +     geom_boxplot() +      labs(title = \"Out-of-state Tuition by School Type\",           subtitle = \"This is a box plot displaying the summary statistics for the out-of-state tuition by school type.\\nWe can see that the first quartile of private school tuition is above the third quartile of the\\npublic school tuition.\",           caption = \"Mincen Liu\") +     xlab(\"school type\") + ylab(\"out-of-state tuition in USD\") combined %>% ggplot(aes(x = out_of_state_tuition, y = mid_career_pay)) +      geom_point() +      facet_grid(type ~ .) +      labs(title = \"Mid Career Pay vs. Out-of-state Tuition by School Type\",           subtitle = \"This is a scatter plot showing the relationship between the mid career pay and the out-of-state\\ntuition, faceted by school type. We see an overall positive relation in each school type.\",           caption = \"Mincen Liu\") +     xlab(\"out-of-state tuition in USD\") + ylab(\"mid career pay in USD\") combined %>% ggplot(aes(early_career_pay)) +     geom_density() +     labs(title = \"Early Career Pay\",           subtitle = \"This is a density plot of the early career pay. We see a right-skewed distribution.\",           caption = \"Mincen Liu\") +     xlab(\"early career pay in USD\") + ylab(\"density\")"},{"path":"/articles/part1c.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Example analysis","text":"average, private school --state tuition much higher public school --state tuition among 4-year institutions. see overall positive relation mid career pay --state tuition school type. early career pay right-skewed distribution.","code":""},{"path":"/articles/part1c.html","id":"list-of-functions-used","dir":"Articles","previous_headings":"","what":"List of Functions Used","title":"Example analysis","text":"dplyr: glimpse(), inner_join(), select(), slice(), count(), filter() stringr: str_equal(), str_replace() purrr: map2(), pmap() ggplot2: geom_boxplot(), geom_point(), geom_density() omnibus: naRows(), mmode()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam B. Smith. Maintainer, author. Mincen Liu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith , Liu M (2022). omnibus: Helper Tools Managing Data, Dates, Missing Values, Text. R package version 1.1.3, https://github.com/adamlilith/omnibus.","code":"@Manual{,   title = {omnibus: Helper Tools for Managing Data, Dates, Missing Values, and Text},   author = {Adam B. Smith and Mincen Liu},   year = {2022},   note = {R package version 1.1.3},   url = {https://github.com/adamlilith/omnibus}, }"},{"path":[]},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"original R package came : https://github.com/adamlilith/omnibus. URL deployed website: <>. changed overall appearance website theme Bootswatch. changed background color black text color blue gray. changed highlighting code blocks “theme: ayu-mirage”. changed background inline code light orange. changed font headings. changed font majority text.","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"R Utility Functions 99%  assortment helper functions managing data (e.g., rotating values matrices user-defined angle, switching row- column-indexing), dates (e.g., intuiting year messy date strings), handling missing values (e.g., removing elements/rows across multiple vectors matrices NA), text (e.g., flushing reports console real-time).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"version 1.1.2, omnibus CRAN! can install latest CRAN-stable version normal way install packages CRAN, development version using: may need install remotes package first.","code":"remotes::install_github('adamlilith/omnibus', dependencies=TRUE)"},{"path":"/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data manipulation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. mergeLists: Merge lists. ‘renumSeq’: Renumber sequence. maxRuns: Maximum number continuous “runs” values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/index.html","id":"dates","dir":"","previous_headings":"","what":"Dates","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year? yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/index.html","id":"geometry","dir":"","previous_headings":"","what":"Geometry","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/index.html","id":"handling-nas","dir":"","previous_headings":"","what":"Handling NAs","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"%<na%, %<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA.","code":""},{"path":"/index.html","id":"data-properties","dir":"","previous_headings":"","what":"Data properties","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax .min pmin (vectorized .max .min).","code":""},{"path":"/index.html","id":"system","dir":"","previous_headings":"","what":"System","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"dirCreate: Nicer version dir.create(). eps: Smallest floating point value computer can think . listFiles: Nicer version list.files(). memUse: Display largest objects memory.","code":""},{"path":"/index.html","id":"text","dir":"","previous_headings":"","what":"Text","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 –> 007). say: Replacement print('abc'); flush.console().","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"basic example isLeapYear() function:","code":"isLeapYear(2022)"},{"path":"/reference/bracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify values bracketing another value — bracket","title":"Identify values bracketing another value — bracket","text":"function takes ordered vector numeric character values finds pair bracket third value, x. x exactly equal one values vector, single value equal x returned. x falls outside range vector, least/extreme value vector returned (depending side distribution vector x resides). Optionally, users can function return index values bracket x.","code":""},{"path":"/reference/bracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify values bracketing another value — bracket","text":"","code":"bracket(x, by, index = FALSE, inner = TRUE, warn = FALSE)"},{"path":"/reference/bracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify values bracketing another value — bracket","text":"x One numeric character values. vector numeric character values. sorted (high low low high... , error result). index Logical. FALSE (default), numeric values returned. TRUE, index indices bracketing value(s) returned. inner Logical. TRUE (default), x surrounded least one series repeating values, return values (indices) among repeated sequence(s) closest value x. FALSE, return value(s) (indices) among repeated sequence(s) farthest value x. example, index = TRUE, = c(1, 2, 2, 2, 3, 3), x = 2.5, setting inner = TRUE return index third 2 first 3.  inner = FALSE, function returns index first 2 second 3. warn Logical. TRUE, warn x outside range .","code":""},{"path":"/reference/bracket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify values bracketing another value — bracket","text":"x single value, function return numeric vector length 1 2, depending many values bracket x. values , median index (value) returned. x vector, result list one element per item x element format case x single value.","code":""},{"path":"/reference/bracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify values bracketing another value — bracket","text":"","code":"by <- 2 * (1:5) bracket(4.2, by) #> [1] 4 6 bracket(6.8, by) #> [1] 6 8  bracket(3.2, by, index=TRUE) #> [1] 1 2 bracket(c(3.2, 9.8, 4), by) #> [[1]] #> [1] 2 4 #>  #> [[2]] #> [1]  8 10 #>  #> [[3]] #> [1] 4 #>   bracket(2, c(0, 1, 1, 1, 3, 5), index=TRUE) #> [1] 4 5 bracket(3, c(1, 2, 10)) #> [1]  2 10  bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6  # \\donttest{ by <- 1:10 bracket(-100, by) #> [1] 1 bracket(100, by) #> [1] 10 # }"},{"path":"/reference/capIt.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter of a string — capIt","title":"Capitalize first letter of a string — capIt","text":"function capitalizes first letter string first letters list strings.","code":""},{"path":"/reference/capIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter of a string — capIt","text":"","code":"capIt(x)"},{"path":"/reference/capIt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter of a string — capIt","text":"x Character character list.","code":""},{"path":"/reference/capIt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter of a string — capIt","text":"Character character list.","code":""},{"path":[]},{"path":"/reference/capIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize first letter of a string — capIt","text":"","code":"x <- c('shots', 'were', 'exchanged at the ', 'hospital.') capIt(x) #>              shots               were  exchanged at the           hospital.  #>            \"Shots\"             \"Were\" \"Exchanged At The\"        \"Hospital.\""},{"path":"/reference/combineDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with different fields using a crosswalk table — combineDf","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"function combines multiple data frames, possibly different column names, single data frame.  Usually merge faster easier implement columns merged names, rbind always faster much easier column names match exactly.","code":""},{"path":"/reference/combineDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"combineDf(   ...,   crosswalk,   sep = \"; \",   use = NULL,   classes = NULL,   verbose = FALSE )"},{"path":"/reference/combineDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"... list data frames. ignored, paths file names data frames can specified crosswalk. crosswalk Data frame. Column names fields desired output data frame. row corresponds different data frame join. ... used first column must paths file names CSV, RDS, RData files representing data frames join. column, elements cell contain name column data frame coincides column name crosswalk table.  example, final output column name \"species\" \"data frame #1\" column named \"Species\" \"data frame #2\" column named \"scientificName\", first value crosswalk \"species\" column \"Species\" second \"scientificName\". complex joining can done using following cells crosswalk: _ start value: indicates value crosswalk table read text repeated output row (minus initial \"_\"). example, \"_inspected\" repeat string \"inspected\" every row output corresponding respective data frame. 'c(~~~)': paste together fields source data frame named ... using string specified sep (\"~~~\" represents column names respective data frame). Note entire string must inside single double quotes 'c()' \"c()\" columns named inside c() must delineated kind quote (single c() delineated double, vice versa). NA: Repeats NA. sep Character, specifies string put fields combined c(~~~~) format crosswalk. use Logical, Character, NULL, ... used list logical elements (TRUE FALSE), column name crosswalk logical values indicating whether particular data frame collated, NULL, case data frames used (default). classes Character character list, specifies classes (e.g., numeric, character) assigned column output table. NULL, classes assumed character.  just one value listed, columns set class. list, must length number columns crosswalk specify class column. verbose Logical, TRUE prints extra information execution.  Useful debugging crosswalk table.","code":""},{"path":"/reference/combineDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"data frame.","code":""},{"path":[]},{"path":"/reference/combineDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"df1 <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff') df2 <- data.frame(y1=11:15, y3=rev(letters)[1:5])  crosswalk <- data.frame(   a=c('x1', 'y1'),   b=c('x2', '_valid'),   c=c('c(\"x3\", \"x4\")', 'y3'),   d=c('x5', NA) )  out <- combineDf(df1, df2, crosswalk=crosswalk) out #>     a     b    c     d #> 1   1 valid a; A stuff #> 2   2 valid b; B stuff #> 3   3 valid c; C stuff #> 4   4 valid d; D stuff #> 5   5 valid e; E stuff #> 6  11 valid    z  <NA> #> 7  12 valid    y  <NA> #> 8  13 valid    x  <NA> #> 9  14 valid    w  <NA> #> 10 15 valid    v  <NA>"},{"path":"/reference/corner.html","id":null,"dir":"Reference","previous_headings":"","what":"Corner of a matrix or data frame — corner","title":"Corner of a matrix or data frame — corner","text":"function returns corner matrix data frame (.e., upper left, upper right, lower left, lower right).","code":""},{"path":"/reference/corner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corner of a matrix or data frame — corner","text":"","code":"corner(x, corner = 1, size = 5)"},{"path":"/reference/corner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corner of a matrix or data frame — corner","text":"x Data frame, matrix, vector number rows elements . corner Integer set 1, 2, 3, 4 character set 'topleft', 'topright', 'bottomleft', 'bottomright' set 'tl', 'tr', 'bl', 'br'. Indicates corner return. Integers 1, 2, 3 4 correspond top left, top right, bottom left, bottom right corners. default 1, top left corner. size Positive integer, number rows columns return. fewer columns/rows indicated columns/rows returned.","code":""},{"path":"/reference/corner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corner of a matrix or data frame — corner","text":"matrix data frame.","code":""},{"path":[]},{"path":"/reference/corner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corner of a matrix or data frame — corner","text":"","code":"x <- matrix(1:120, ncol=12, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1   11   21   31   41   51   61   71   81    91   101   111 #>  [2,]    2   12   22   32   42   52   62   72   82    92   102   112 #>  [3,]    3   13   23   33   43   53   63   73   83    93   103   113 #>  [4,]    4   14   24   34   44   54   64   74   84    94   104   114 #>  [5,]    5   15   25   35   45   55   65   75   85    95   105   115 #>  [6,]    6   16   26   36   46   56   66   76   86    96   106   116 #>  [7,]    7   17   27   37   47   57   67   77   87    97   107   117 #>  [8,]    8   18   28   38   48   58   68   78   88    98   108   118 #>  [9,]    9   19   29   39   49   59   69   79   89    99   109   119 #> [10,]   10   20   30   40   50   60   70   80   90   100   110   120 corner(x, 1) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   11   21   31   41 #> [2,]    2   12   22   32   42 #> [3,]    3   13   23   33   43 #> [4,]    4   14   24   34   44 #> [5,]    5   15   25   35   45 corner(x, 2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   71   81   91  101  111 #> [2,]   72   82   92  102  112 #> [3,]   73   83   93  103  113 #> [4,]   74   84   94  104  114 #> [5,]   75   85   95  105  115 corner(x, 3) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   16   26   36   46 #> [2,]    7   17   27   37   47 #> [3,]    8   18   28   38   48 #> [4,]    9   19   29   39   49 #> [5,]   10   20   30   40   50 corner(x, 4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   76   86   96  106  116 #> [2,]   77   87   97  107  117 #> [3,]   78   88   98  108  118 #> [4,]   79   89   99  109  119 #> [5,]   80   90  100  110  120"},{"path":"/reference/countDecDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of digits after a decimal place — countDecDigits","title":"Calculate number of digits after a decimal place — countDecDigits","text":"function calculates number digits decimal place. Note trailing zeros likely ignored.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(x)"},{"path":"/reference/countDecDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of digits after a decimal place — countDecDigits","text":"x Numeric numeric list.","code":""},{"path":"/reference/countDecDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of digits after a decimal place — countDecDigits","text":"Integer.","code":""},{"path":"/reference/countDecDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(c(1, 1.1, 1.12, 1.123, 1.1234, -1, 0, 10.0000, 10.0010)) #> [1] 0 1 2 3 4 0 0 0 3"},{"path":"/reference/cull.html","id":null,"dir":"Reference","previous_headings":"","what":"Force objects to have length or rows equal to the shortest — cull","title":"Force objects to have length or rows equal to the shortest — cull","text":"function takes set vectors, data frames, matrices removes last values/rows length/number rows equal shortest among .","code":""},{"path":"/reference/cull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"cull(...)"},{"path":"/reference/cull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force objects to have length or rows equal to the shortest — cull","text":"... Vectors, matrices, data frames.","code":""},{"path":"/reference/cull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force objects to have length or rows equal to the shortest — cull","text":"List objects one element per object supplied argument function.","code":""},{"path":"/reference/cull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"a <- 1:10 b <- 1:20 c <- letters cull(a, b, c) #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $b #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $c #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  x <- data.frame(x=1:10, y=letters[1:10]) y <- data.frame(x=1:26, y=letters) cull(x, y) #> $x #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>  #> $y #>     x y #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j #>"},{"path":"/reference/dirCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for dir.create() — dirCreate","title":"Replacement for dir.create() — dirCreate","text":"function somewhat friendlier version dir.create automatically sets recursive=TRUE showWarnings=FALSE arguments.","code":""},{"path":"/reference/dirCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for dir.create() — dirCreate","text":"","code":"dirCreate(...)"},{"path":"/reference/dirCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for dir.create() — dirCreate","text":"... Character string(s). path name directory create. Multiple strings pasted together one path, although slashes pasted .","code":""},{"path":"/reference/dirCreate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for dir.create() — dirCreate","text":"Nothing (creates directory storage system).","code":""},{"path":[]},{"path":"/reference/domLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for leap years — domLeap","title":"Day of month for leap years — domLeap","text":"Data frame day month month leap year.","code":""},{"path":"/reference/domLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for leap years — domLeap","text":"","code":"domLeap"},{"path":"/reference/domLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for leap years — domLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for leap years — domLeap","text":"","code":"data(domLeap) domLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     29     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/domNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for non-leap years — domNonLeap","title":"Day of month for non-leap years — domNonLeap","text":"Data frame day month month non-leap year.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for non-leap years — domNonLeap","text":"","code":"domNonLeap"},{"path":"/reference/domNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for non-leap years — domNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/domNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for non-leap years — domNonLeap","text":"","code":"data(domNonLeap) domNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     NA     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"/reference/doyLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of year for leap years — doyLeap","title":"Day of year for leap years — doyLeap","text":"Data frame day year month leap year.","code":""},{"path":"/reference/doyLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of year for leap years — doyLeap","text":"","code":"doyLeap"},{"path":"/reference/doyLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of year for leap years — doyLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of year for leap years — doyLeap","text":"","code":"data(doyLeap) doyLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     61     92    122    153    183    214    245     275 #> 2       2     33     62     93    123    154    184    215    246     276 #> 3       3     34     63     94    124    155    185    216    247     277 #> 4       4     35     64     95    125    156    186    217    248     278 #> 5       5     36     65     96    126    157    187    218    249     279 #> 6       6     37     66     97    127    158    188    219    250     280 #> 7       7     38     67     98    128    159    189    220    251     281 #> 8       8     39     68     99    129    160    190    221    252     282 #> 9       9     40     69    100    130    161    191    222    253     283 #> 10     10     41     70    101    131    162    192    223    254     284 #> 11     11     42     71    102    132    163    193    224    255     285 #> 12     12     43     72    103    133    164    194    225    256     286 #> 13     13     44     73    104    134    165    195    226    257     287 #> 14     14     45     74    105    135    166    196    227    258     288 #> 15     15     46     75    106    136    167    197    228    259     289 #> 16     16     47     76    107    137    168    198    229    260     290 #> 17     17     48     77    108    138    169    199    230    261     291 #> 18     18     49     78    109    139    170    200    231    262     292 #> 19     19     50     79    110    140    171    201    232    263     293 #> 20     20     51     80    111    141    172    202    233    264     294 #> 21     21     52     81    112    142    173    203    234    265     295 #> 22     22     53     82    113    143    174    204    235    266     296 #> 23     23     54     83    114    144    175    205    236    267     297 #> 24     24     55     84    115    145    176    206    237    268     298 #> 25     25     56     85    116    146    177    207    238    269     299 #> 26     26     57     86    117    147    178    208    239    270     300 #> 27     27     58     87    118    148    179    209    240    271     301 #> 28     28     59     88    119    149    180    210    241    272     302 #> 29     29     60     89    120    150    181    211    242    273     303 #> 30     30     NA     90    121    151    182    212    243    274     304 #> 31     31     NA     91     NA    152     NA    213    244     NA     305 #>    month11 month12 #> 1      306     336 #> 2      307     337 #> 3      308     338 #> 4      309     339 #> 5      310     340 #> 6      311     341 #> 7      312     342 #> 8      313     343 #> 9      314     344 #> 10     315     345 #> 11     316     346 #> 12     317     347 #> 13     318     348 #> 14     319     349 #> 15     320     350 #> 16     321     351 #> 17     322     352 #> 18     323     353 #> 19     324     354 #> 20     325     355 #> 21     326     356 #> 22     327     357 #> 23     328     358 #> 24     329     359 #> 25     330     360 #> 26     331     361 #> 27     332     362 #> 28     333     363 #> 29     334     364 #> 30     335     365 #> 31      NA     366"},{"path":"/reference/doyNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Days of year for non-leap years — doyNonLeap","title":"Days of year for non-leap years — doyNonLeap","text":"Data frame days year month non-leap year","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"doyNonLeap"},{"path":"/reference/doyNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Days of year for non-leap years — doyNonLeap","text":"object class 'data.frame'.","code":""},{"path":"/reference/doyNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"data(doyNonLeap) doyNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     60     91    121    152    182    213    244     274 #> 2       2     33     61     92    122    153    183    214    245     275 #> 3       3     34     62     93    123    154    184    215    246     276 #> 4       4     35     63     94    124    155    185    216    247     277 #> 5       5     36     64     95    125    156    186    217    248     278 #> 6       6     37     65     96    126    157    187    218    249     279 #> 7       7     38     66     97    127    158    188    219    250     280 #> 8       8     39     67     98    128    159    189    220    251     281 #> 9       9     40     68     99    129    160    190    221    252     282 #> 10     10     41     69    100    130    161    191    222    253     283 #> 11     11     42     70    101    131    162    192    223    254     284 #> 12     12     43     71    102    132    163    193    224    255     285 #> 13     13     44     72    103    133    164    194    225    256     286 #> 14     14     45     73    104    134    165    195    226    257     287 #> 15     15     46     74    105    135    166    196    227    258     288 #> 16     16     47     75    106    136    167    197    228    259     289 #> 17     17     48     76    107    137    168    198    229    260     290 #> 18     18     49     77    108    138    169    199    230    261     291 #> 19     19     50     78    109    139    170    200    231    262     292 #> 20     20     51     79    110    140    171    201    232    263     293 #> 21     21     52     80    111    141    172    202    233    264     294 #> 22     22     53     81    112    142    173    203    234    265     295 #> 23     23     54     82    113    143    174    204    235    266     296 #> 24     24     55     83    114    144    175    205    236    267     297 #> 25     25     56     84    115    145    176    206    237    268     298 #> 26     26     57     85    116    146    177    207    238    269     299 #> 27     27     58     86    117    147    178    208    239    270     300 #> 28     28     59     87    118    148    179    209    240    271     301 #> 29     29     NA     88    119    149    180    210    241    272     302 #> 30     30     NA     89    120    150    181    211    242    273     303 #> 31     31     NA     90     NA    151     NA    212    243     NA     304 #>    month11 month12 #> 1      305     335 #> 2      306     336 #> 3      307     337 #> 4      308     338 #> 5      309     339 #> 6      310     340 #> 7      311     341 #> 8      312     342 #> 9      313     343 #> 10     314     344 #> 11     315     345 #> 12     316     346 #> 13     317     347 #> 14     318     348 #> 15     319     349 #> 16     320     350 #> 17     321     351 #> 18     322     352 #> 19     323     353 #> 20     324     354 #> 21     325     355 #> 22     326     356 #> 23     327     357 #> 24     328     358 #> 25     329     359 #> 26     330     360 #> 27     331     361 #> 28     332     362 #> 29     333     363 #> 30     334     364 #> 31      NA     365"},{"path":"/reference/ellipseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"function returns names objects input function ellipses. useful called inside function.","code":""},{"path":"/reference/ellipseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"","code":"ellipseNames(...)"},{"path":"/reference/ellipseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"... Objects.","code":""},{"path":"/reference/ellipseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of objects input as arguments in ellipse (...) form — ellipseNames","text":"Character list.","code":""},{"path":"/reference/eps.html","id":null,"dir":"Reference","previous_headings":"","what":"The smallest machine-readable number — eps","title":"The smallest machine-readable number — eps","text":"function returns smallest machine-readable number (equal .Machine$double.eps).","code":""},{"path":"/reference/eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The smallest machine-readable number — eps","text":"","code":"eps()"},{"path":"/reference/eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The smallest machine-readable number — eps","text":"Numeric value.","code":""},{"path":"/reference/eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The smallest machine-readable number — eps","text":"","code":"eps() #> [1] 2.220446e-16"},{"path":"/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert values into a vector — insert","title":"Insert values into a vector — insert","text":"function inserts values vector, lengthening overall vector. different , say, x[1:3] <- c('', 'b', 'c') simply replaces values indices 1 3.","code":""},{"path":"/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert values into a vector — insert","text":"","code":"insert(x, into, at, warn = TRUE)"},{"path":"/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert values into a vector — insert","text":"x Vector values insert. vector values insert x. Vector positions (indices) x inserted. length x shorter length , values x recycled warning produced. warn TRUE, provide warnings.","code":""},{"path":"/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert values into a vector — insert","text":"Vector.","code":""},{"path":[]},{"path":"/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert values into a vector — insert","text":"","code":"x <- -1:-3 into <- 10:20 at <- c(1, 3, 14) insert(x, into, at) #>  [1] -1 10 -2 11 12 13 14 15 16 17 18 19 20 -3  insert(-1, into, at) #> Warning: Length of x is shorter than the length of at. Recycling x. #>  [1] -1 10 -1 11 12 13 14 15 16 17 18 19 20 -1"},{"path":"/reference/insertCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a column or row into a data frame or matrix — insertCol","title":"Insert a column or row into a data frame or matrix — insertCol","text":"function inserts one columns rows another column row data frame matrix. similar cbind except inserted column(s)/row(s) can placed anywhere.","code":""},{"path":"/reference/insertCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"insertCol(x, into, at = NULL, before = TRUE)  insertRow(x, into, at = NULL, before = TRUE)"},{"path":"/reference/insertCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a column or row into a data frame or matrix — insertCol","text":"x Data frame, matrix, vector number columns rows elements . Data frame matrix x inserted. Character, integer, NULL. Name column column number name row row number insertion. NULL (default), result exactly cbind(, x except retains row numbers column names . Logical, TRUE (default) insertion occur front column row named , FALSE . Ignored NULL.","code":""},{"path":"/reference/insertCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a column or row into a data frame or matrix — insertCol","text":"data frame.","code":""},{"path":"/reference/insertCol.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Insert a column or row into a data frame or matrix — insertCol","text":"insertRow(): Insert column row data frame matrix","code":""},{"path":[]},{"path":"/reference/insertCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"x <- data.frame(y1=11:15, y2=rev(letters)[1:5]) into <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff')  insertCol(x, into=into, at='x3') #>   x1    x2 y1 y2 x3 x4    x5 #> 1  1 valid 11  z  a  A stuff #> 2  2 valid 12  y  b  B stuff #> 3  3 valid 13  x  c  C stuff #> 4  4 valid 14  w  d  D stuff #> 5  5 valid 15  v  e  E stuff insertCol(x, into=into, at='x3', before=FALSE) #>   x1    x2 x3 y1 y2 x4    x5 #> 1  1 valid  a 11  z  A stuff #> 2  2 valid  b 12  y  B stuff #> 3  3 valid  c 13  x  C stuff #> 4  4 valid  d 14  w  D stuff #> 5  5 valid  e 15  v  E stuff insertCol(x, into) #>   x1    x2 x3 x4    x5 y1 y2 #> 1  1 valid  a  A stuff 11  z #> 2  2 valid  b  B stuff 12  y #> 3  3 valid  c  C stuff 13  x #> 4  4 valid  d  D stuff 14  w #> 5  5 valid  e  E stuff 15  v  x <- data.frame(x1=1:3, x2=LETTERS[1:3]) into <- data.frame(x1=11:15, x2='valid') row.names(into) <- letters[1:5]  insertRow(x, into=into, at='b') #>   x1    x2 #> a 11 valid #> 1  1     A #> 2  2     B #> 3  3     C #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into=into, at='b', before=FALSE) #>   x1    x2 #> a 11 valid #> b 12 valid #> 1  1     A #> 2  2     B #> 3  3     C #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into) #>   x1    x2 #> a 11 valid #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid #> 1  1     A #> 2  2     B #> 3  3     C"},{"path":"/reference/isLeapYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a year a leap year? — isLeapYear","title":"Is a year a leap year? — isLeapYear","text":"Returns TRUE year leap year. can use \"negative\" years BCE.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(x)"},{"path":"/reference/isLeapYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a year a leap year? — isLeapYear","text":"x Integer vector integers representing years.","code":""},{"path":"/reference/isLeapYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a year a leap year? — isLeapYear","text":"Vector logical values.","code":""},{"path":"/reference/isLeapYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(1990:2004) # note 2000 *was* not a leap year #>  [1] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE #> [13] FALSE FALSE  TRUE isLeapYear(1896:1904) # 1900 was *not* a leap year #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/isTRUENA.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized test for truth robust to NA — isTRUENA","title":"Vectorized test for truth robust to NA — isTRUENA","text":"functions work exactly x == TRUE x == FALSE default return FALSE cases NA.","code":""},{"path":"/reference/isTRUENA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"isTRUENA(x, ifNA = FALSE)  isFALSENA(x, ifNA = FALSE)"},{"path":"/reference/isTRUENA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized test for truth robust to NA — isTRUENA","text":"x Single value condition vector values evaluate. ifNA Logical, value return result evaluating x NA. Note can anything (.e., TRUE, FALSE, number, etc.).","code":""},{"path":"/reference/isTRUENA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized test for truth robust to NA — isTRUENA","text":"Logical value specified ifNA.","code":""},{"path":"/reference/isTRUENA.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Vectorized test for truth robust to NA — isTRUENA","text":"isFALSENA(): Vectorized test truth robust NA","code":""},{"path":[]},{"path":"/reference/isTRUENA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"x <- c(TRUE, TRUE, FALSE, NA) x == TRUE #> [1]  TRUE  TRUE FALSE    NA isTRUENA(x) #> [1]  TRUE  TRUE FALSE FALSE x == FALSE #> [1] FALSE FALSE  TRUE    NA isFALSENA(x) #> [1] FALSE FALSE  TRUE FALSE isTRUENA(x, ifNA = Inf) #> [1]   1   1   0 Inf # note that isTRUE and isFALSE are not vectorized isTRUE(x) #> [1] FALSE isFALSE(x) #> [1] FALSE"},{"path":"/reference/listFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for list.files() — listFiles","title":"Replacement for list.files() — listFiles","text":"function slightly friendlier version list.files automatically includes full.names=TRUE argument.","code":""},{"path":"/reference/listFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for list.files() — listFiles","text":"","code":"listFiles(x, ...)"},{"path":"/reference/listFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for list.files() — listFiles","text":"x Path name folder containing files list. ... Arguments pass list.files (full.names).","code":""},{"path":"/reference/listFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for list.files() — listFiles","text":"Character list.","code":""},{"path":[]},{"path":"/reference/listFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacement for list.files() — listFiles","text":"","code":"# list files in location where R is installed listFiles(R.home()) #>  [1] \"/Library/Frameworks/R.framework/Resources/COPYING\"      #>  [2] \"/Library/Frameworks/R.framework/Resources/Info.plist\"   #>  [3] \"/Library/Frameworks/R.framework/Resources/R\"            #>  [4] \"/Library/Frameworks/R.framework/Resources/Rscript\"      #>  [5] \"/Library/Frameworks/R.framework/Resources/SVN-REVISION\" #>  [6] \"/Library/Frameworks/R.framework/Resources/bin\"          #>  [7] \"/Library/Frameworks/R.framework/Resources/doc\"          #>  [8] \"/Library/Frameworks/R.framework/Resources/etc\"          #>  [9] \"/Library/Frameworks/R.framework/Resources/fontconfig\"   #> [10] \"/Library/Frameworks/R.framework/Resources/include\"      #> [11] \"/Library/Frameworks/R.framework/Resources/lib\"          #> [12] \"/Library/Frameworks/R.framework/Resources/library\"      #> [13] \"/Library/Frameworks/R.framework/Resources/man1\"         #> [14] \"/Library/Frameworks/R.framework/Resources/modules\"      #> [15] \"/Library/Frameworks/R.framework/Resources/share\"        #> [16] \"/Library/Frameworks/R.framework/Resources/tests\"        listFiles(R.home(), pattern='README') #> character(0)"},{"path":"/reference/longRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the longest run of a particular value in a numeric vector — longRun","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"function returns lengh longest run particular numeric value numeric vector.  \"run\" uninterrupted  sequence number. Runs can \"wrapped\" sequence starts ends target value considered consecutive run.","code":""},{"path":"/reference/longRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"longRun(x, val, wrap = FALSE, na.rm = FALSE)"},{"path":"/reference/longRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"x Numeric vector. val Numeric. Value elements x calculate length longest run. wrap Logical. TRUE runs can \"wrap\" end x start x first last elements x equal val. na.rm Logical. TRUE remove NAs first.","code":""},{"path":"/reference/longRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"Integer.","code":""},{"path":[]},{"path":"/reference/longRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"x <- c(1, 1, 1, 2, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1) longRun(x, 2) #> [1] 2 longRun(x, 1) #> [1] 5 longRun(x, 1, wrap=TRUE) #> [1] 8"},{"path":"/reference/maxRuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum number of continuous ","title":"Maximum number of continuous ","text":"Consider ordered set values, say 1, 4, 0, 0, 0, 2, 0, 10. can ask, number times zeroes appear successively? example, one set three continuous zeros, one set single zero. number runs zero 2, maximum run length 3. function calculates number runs based certain condition defining run. condition stated function returns logical value. function example function(x) x == 0.","code":""},{"path":"/reference/maxRuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum number of continuous ","text":"","code":"maxRuns(x, fx, args = NULL, failIfAllNA = FALSE)"},{"path":"/reference/maxRuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum number of continuous ","text":"x Vector numeric, character, values. fx function returns TRUE, FALSE, (optionally) NA. function must use x first argument. example, function(x) x == 0 allowable, function(y) y == 0 . Values count TRUE counted toward run. args list object additional arguments supply function fx. failIfAllNA TRUE, fail values NA evaluated fx.","code":""},{"path":"/reference/maxRuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum number of continuous ","text":"Lengths successive runs elements meet criterion. single value 0 indicates conditions meet criterion.","code":""},{"path":"/reference/maxRuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum number of continuous ","text":"","code":"x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x) x == 0 maxRuns(x, fx) #> [1] 3  fx <- function(x) x > 0 maxRuns(x, fx) #> [1] 2   fx <- function(x) x > 0 & x < 5 maxRuns(x, fx) #> [1] 2  x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x, th) x == th maxRuns(x, fx, args=list(th=0)) #> [1] 3  # \"count\" NA as an observation  x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), FALSE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 3   # include NAs as part of a run x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), TRUE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 5"},{"path":"/reference/memUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of objects taking most memory use — memUse","title":"Size of objects taking most memory use — memUse","text":"Displays largest objects memUse.","code":""},{"path":"/reference/memUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse(   n = 10,   orderBy = \"size\",   decreasing = TRUE,   pos = 1,   display = TRUE,   ... )"},{"path":"/reference/memUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of objects taking most memory use — memUse","text":"n Positive integer, maximum number objects display. orderBy Either 'size' (default) 'name'. decreasing Logical, TRUE (default), objects displayed largest smallest. pos Environment obtain size objects. Default 1. See ls.#\" display TRUE (default), print table memUse used. ... arguments pass ls.","code":""},{"path":"/reference/memUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of objects taking most memory use — memUse","text":"Data frame (invisible).","code":""},{"path":"/reference/memUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse() #>                    size #> tuition_cost     497832 #> salary_potential 139232 #> combined         123920 #> temp              46640 #> temp2             46640 #> domLeap            3648 #> domNonLeap         3648 #> doyLeap            3648 #> doyNonLeap         3648 #> ind                 592 memUse(3) #>                    size #> tuition_cost     497832 #> salary_potential 139232 #> combined         123920"},{"path":"/reference/mergeLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two lists with precedence — mergeLists","title":"Merge two lists with precedence — mergeLists","text":"function merges two lists create single, combined list. conflict (e.g., two elements name), items second list gain preference. Adapted Stack Overflow (http://stackoverflow.com/questions/13811501/r-merge-lists--overwrite--recursion).","code":""},{"path":"/reference/mergeLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two lists with precedence — mergeLists","text":"","code":"mergeLists(list1, list2)"},{"path":"/reference/mergeLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two lists with precedence — mergeLists","text":"list1 List object. list2 List object.","code":""},{"path":"/reference/mergeLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two lists with precedence — mergeLists","text":"List object.","code":""},{"path":"/reference/mergeLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two lists with precedence — mergeLists","text":"","code":"list1 <- list(a=1:3, b='Hello world', c=LETTERS[1:3]) list2 <- list(x=4, b='Goodbye world', z=letters[1:2]) mergeLists(list1, list2) #> $x #> [1] 4 #>  #> $b #> [1] \"Goodbye world\" #>  #> $z #> [1] \"a\" \"b\" #>  #> $a #> [1] 1 2 3 #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  mergeLists(list2, list1) #> $a #> [1] 1 2 3 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  #> $x #> [1] 4 #>  #> $z #> [1] \"a\" \"b\" #>  list3 <- list(m=list(n=4:7, o=pi), a=1:5) mergeLists(list1, list3) #> $m #> $m$n #> [1] 4 5 6 7 #>  #> $m$o #> [1] 3.141593 #>  #>  #> $a #> [1] 1 2 3 4 5 #>  #> $b #> [1] \"Hello world\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>"},{"path":"/reference/mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip an object — mirror","title":"Flip an object — mirror","text":"function creates \"mirror\" image character string, number, matrix, data frame. example \"Shots exchanged hospital\" becomes \"latipsoh eht ta degnahcxe erew stohS' 3.14159 becomes 95141.3. Data frames matrices returned order columns order rows reversed.","code":""},{"path":"/reference/mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip an object — mirror","text":"","code":"mirror(x, direction = \"lr\")"},{"path":"/reference/mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip an object — mirror","text":"x Numeric character, vector numeric character values, matrix data frame. direction used x matrix data frame. Accepted values 'lr' (left-right mirror) 'ud' (-mirror).","code":""},{"path":"/reference/mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip an object — mirror","text":"Object class x.","code":""},{"path":"/reference/mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip an object — mirror","text":"","code":"x <- 'Shots were exchanged at the hospital' mirror(x) #> [1] \"latipsoh eht ta degnahcxe erew stohS\"  x <- c('Water', 'water', 'everywhere') mirror(x) #> [1] \"retaW\"      \"retaw\"      \"erehwyreve\"  # last value will return NA because the exponentiation does not  # make sense when written backwards x <- c(3.14159, 2.71828, 6.02214076e+23)  mirror(x) #> Warning: NAs introduced by coercion #> [1] 95141.3 82817.2      NA x <- data.frame(x=1:5, y=6:10) mirror(x) #>    y x #> 1  6 1 #> 2  7 2 #> 3  8 3 #> 4  9 4 #> 5 10 5  x <- matrix(1:10, nrow=2) mirror(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9    7    5    3    1 #> [2,]   10    8    6    4    2 #> attr(,\"class\") #> [1] \"matrix\" \"array\""},{"path":"/reference/mmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal value(s) — mmode","title":"Modal value(s) — mmode","text":"Modal value. one unique mode, modal values returned.","code":""},{"path":"/reference/mmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal value(s) — mmode","text":"","code":"mmode(x)"},{"path":"/reference/mmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal value(s) — mmode","text":"x Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal value(s) — mmode","text":"Numeric character vector.","code":""},{"path":"/reference/mmode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal value(s) — mmode","text":"","code":"x <- c(1, 2, 3, 3, 4, 5, 3, 1, 2) mmode(x) #> [1] 3  x <- c(1, 2, 3) mmode(x) #> [1] 1 2 3"},{"path":"/reference/naCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"function set operators perform simple (vectorized) comparisons using <, <=, >, >=, !=, == values always returns TRUE FALSE. TRUE occurs condition can evaluated TRUE. FALSE returned condition FALSE evaluated.","code":""},{"path":"/reference/naCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare(op, x, y)  x %<na% y  x %<=na% y  x %==na% y  x %!=na% y  x %>na% y  x %>=na% y"},{"path":"/reference/naCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"op Character, operation perform: '<', '<=', '>', '>=', '!=', '=='. Note must character (.e., put quotes). x, y Vectors numeric, character, NA, /NaN values. first value operation x XXX y XXX operator op. x shorter y x recycled.","code":""},{"path":"/reference/naCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"Vector logical values.","code":""},{"path":"/reference/naCompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare('<', c(1, 2, NA), c(10, 1, 0)) #> [1]  TRUE FALSE FALSE naCompare('<', c(1, 2, NA), 10) #> [1]  TRUE  TRUE FALSE naCompare('<', c(1, 2, NA), NA) #> [1] FALSE FALSE FALSE # compare to: NA < 5 #> [1] NA NA < NA #> [1] NA  # same operations with operators: 1 %<na% 2 #> [1] TRUE 1 %<na% NA #> [1] FALSE 3 %==na% 3 #> [1] TRUE NA %==na% 3 #> [1] FALSE 4 %!=na% 4 #> [1] FALSE 4 %!=na% NA #> [1] FALSE 5 %>=na% 3 #> [1] TRUE 5 %>=na% NA #> [1] FALSE 3 %==na% c(NA, 1, 2, 3, 4) #> [1] FALSE FALSE FALSE  TRUE FALSE  # compare to: 1 < 2 #> [1] TRUE 1 < NA #> [1] NA 3 == 3 #> [1] TRUE NA == 3 #> [1] NA 4 != 4 #> [1] FALSE 4 != NA #> [1] NA 5 >= 3 #> [1] TRUE 5 >= NA #> [1] NA 3 == c(NA, 1, 2, 3, 4) #> [1]    NA FALSE FALSE  TRUE FALSE"},{"path":"/reference/naOmitMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from one or more equal-length vectors — naOmitMulti","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"function removes elements one equal-length vectors one NA position. example, three vectors , B, C, NA first position C NA third position, , B, C elements positions 1 3 removed.","code":""},{"path":"/reference/naOmitMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"naOmitMulti(...)"},{"path":"/reference/naOmitMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"... Vectors (numeric character).","code":""},{"path":"/reference/naOmitMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"List objects class ....","code":""},{"path":[]},{"path":"/reference/naOmitMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"a <- c(NA, 'b', 'c', 'd', 'e', NA) b <- c(1, 2, 3, NA, 5, NA) c <- c(6, 7, 8, 9, 10, NA) naOmitMulti(a, b, c) #> [[1]] #> [1] \"b\" \"c\" \"e\" #>  #> [[2]] #> [1] 2 3 5 #>  #> [[3]] #> [1]  7  8 10 #>"},{"path":"/reference/naRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of rows in a data frame or matrix that contain at least one NA — naRows","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"function returns row number row data frame matrix least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/naRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"naRows(x, inf = FALSE, inverse = FALSE)"},{"path":"/reference/naRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"x Data frame matrix. inf Logical, TRUE also return row numbers rows least one element Inf -Inf. default FALSE. inverse Logical, TRUE return row numbers rows NAs (possibly Inf -Inf).  default FALSE.","code":""},{"path":"/reference/naRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"Integer vector.","code":""},{"path":"/reference/naRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"x <- data.frame(a=1:5, b=c(1, 2, NA, 4, 5), c=c('a', 'b', 'c', 'd', NA)) naRows(x) #> [1] 3 5"},{"path":"/reference/omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"omnibus: Fantabulous helper functions — omnibus","title":"omnibus: Fantabulous helper functions — omnibus","text":"package contains set helper functions.","code":""},{"path":"/reference/omnibus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"omnibus: Fantabulous helper functions — omnibus","text":"Create issue GitHub.","code":""},{"path":"/reference/omnibus.html","id":"data-manipulation","dir":"Reference","previous_headings":"","what":"Data manipulation","title":"omnibus: Fantabulous helper functions — omnibus","text":"bracket: Find values bracket given number. combineDf: Combine data frames different schema. corner: Corner matrix data frame. cull: Force vectors matrices/data frames length number rows. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. maxRuns: Maximum number continuous \"runs\" values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). mergeLists: Merge lists. renumSeq: Renumber sequence. rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. stretchMinMax: Rescale values given range.","code":""},{"path":"/reference/omnibus.html","id":"dates","dir":"Reference","previous_headings":"","what":"Dates","title":"omnibus: Fantabulous helper functions — omnibus","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year?  yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"/reference/omnibus.html","id":"geometry","dir":"Reference","previous_headings":"","what":"Geometry","title":"omnibus: Fantabulous helper functions — omnibus","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"/reference/omnibus.html","id":"handling-nas","dir":"Reference","previous_headings":"","what":"Handling NAs","title":"omnibus: Fantabulous helper functions — omnibus","text":"%<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA. (!complete.cases(x)).","code":""},{"path":"/reference/omnibus.html","id":"data-properties","dir":"Reference","previous_headings":"","what":"Data properties","title":"omnibus: Fantabulous helper functions — omnibus","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax, .min pmin (vectorized .max .min).","code":""},{"path":"/reference/omnibus.html","id":"system","dir":"Reference","previous_headings":"","what":"System","title":"omnibus: Fantabulous helper functions — omnibus","text":"dirCreate: Nicer version dir.create. eps: Smallest floating point value computer can think . listFiles: Nicer version list.files. memUse: Display largest objects memory.","code":""},{"path":"/reference/omnibus.html","id":"text","dir":"Reference","previous_headings":"","what":"Text","title":"omnibus: Fantabulous helper functions — omnibus","text":"capIt: Capitalize first letter string. prefix: Add repeating character string ensure user-defined length (e.g., 7 --> 007). say: Replacement print('abc'); flush.console.","code":""},{"path":"/reference/omnibus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omnibus: Fantabulous helper functions — omnibus","text":"Adam B. Smith","code":""},{"path":"/reference/pairDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise distances between two matrices or data frames. — pairDist","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"function takes two data frames matrices returns matrix pairwise Euclidean distances two.","code":""},{"path":"/reference/pairDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"pairDist(x1, x2 = NULL, na.rm = FALSE)"},{"path":"/reference/pairDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"x1 Data frame matrix one columns wide. x2 Data frame matrix one columns wide. NULL, pairwise distances points x1 calculated. na.rm Logical, TRUE rows x1 x2 least one NA removed first.","code":""},{"path":"/reference/pairDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"Matrix nrow(x1) rows nrow(x2) columns. Values distance row x1 row x2.","code":""},{"path":[]},{"path":"/reference/pairDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"x1 <- data.frame(x=sample(1:30, 30), y=sort(round(100 * rnorm(30))), z=sample(1:30, 30)) x2 <- data.frame(x=1:20, y=round(100 * rnorm(20)), z=sample(1:20, 20)) pairDist(x1, x2) #>            [,1]      [,2]       [,3]      [,4]       [,5]      [,6]      [,7] #>  [1,]  57.21014  55.39856  83.701852 281.51554  27.221315 114.20595 321.43117 #>  [2,]  51.89412  50.30904  79.271685 278.14565  20.712315 110.38569 318.15719 #>  [3,]  50.13980  50.67544  76.491830 275.57576  17.146428 107.78683 315.20628 #>  [4,]  46.87217  46.78675  74.390860 274.15507  12.688578 106.08016 314.01592 #>  [5,]  41.35215  41.95235  69.072426 269.15795   6.480741 101.04454 309.00324 #>  [6,]  27.67671  21.77154  53.075418 249.21878  27.531800  82.57118 289.56001 #>  [7,]  14.73092  14.79865  40.890097 240.08540  25.942244  72.09022 280.03571 #>  [8,]  18.05547  14.00000  34.336569 229.33382  40.024992  62.46599 269.37520 #>  [9,]  24.81935  18.38478  33.481338 222.65220  49.839743  57.67148 262.87830 #> [10,]  36.04164  33.42155  33.256578 212.68051  61.603571  50.68530 252.44009 #> [11,]  35.58089  33.61547  30.870698 210.52791  62.369865  48.06246 250.25787 #> [12,]  22.15852  25.31798   8.831761 207.19315  57.297469  39.10243 247.00202 #> [13,]  35.88872  35.69314  23.853721 203.09111  66.241981  39.26831 242.76944 #> [14,]  39.96248  37.37646  26.944387 199.02010  71.617037  37.16181 239.07739 #> [15,]  34.13210  37.34970   6.324555 194.28072  70.178344  26.77686 234.08545 #> [16,]  39.93745  38.32754  20.149442 191.17793  76.019734  27.22132 231.60743 #> [17,]  51.77837  54.87258  27.568098 183.68723  84.005952  24.18677 222.71955 #> [18,]  53.48832  56.54202  26.419690 177.97472  87.595662  15.58846 217.26021 #> [19,]  77.54998  76.45914  52.583267 156.18579 112.703150  25.72936 196.38992 #> [20,]  88.24398  90.42677  60.149813 142.04577 123.332883  29.27456 181.23465 #> [21,]  90.16097  91.14275  62.513998 138.01811 126.495059  30.41381 178.14601 #> [22,] 105.66456 105.03809  79.334734 127.67537 141.226768  48.17676 167.82729 #> [23,] 133.99254 135.10736 106.174385  98.24459 169.215839  74.21590 137.07297 #> [24,] 138.11589 139.16178 110.240646  90.05554 174.287119  78.06408 130.11149 #> [25,] 201.11191 202.64254 173.028899  29.96665 237.002110 141.18782  67.25325 #> [26,] 209.70694 210.23083 181.972525  21.42429 245.888186 149.64959  61.00820 #> [27,] 244.50358 245.51171 216.506351  28.74022 280.060708 184.32037  32.78719 #> [28,] 246.41023 247.20437 218.515446  19.79899 282.485398 186.26862  24.67793 #> [29,] 279.37967 280.03750 251.503479  54.85435 315.215799 219.19170  25.09980 #> [30,] 299.17386 300.41804 271.071946  74.65253 334.725260 239.00000  36.27671 #>            [,8]       [,9]      [,10]     [,11]     [,12]      [,13]     [,14] #>  [1,] 122.38872  13.341664  66.678332 180.98619  93.56816  75.531450  97.25739 #>  [2,] 118.71394   9.165151  62.721607 177.64571  90.09439  72.062473  94.02659 #>  [3,] 115.43830  16.822604  59.573484 174.18668  87.48714  69.641941  92.01087 #>  [4,] 114.12712  13.038405  58.034473 173.18776  86.07555  68.183576  90.53729 #>  [5,] 109.05962  18.627936  53.150729 168.18145  81.37567  63.671030  86.08136 #>  [6,]  91.68424  38.948684  38.196859 150.14993  62.78535  45.321077  65.86350 #>  [7,]  80.40522  46.043458  24.535688 139.44892  52.08647  34.249088  56.54202 #>  [8,]  71.06335  57.645468  18.681542 129.35610  41.78516  23.958297  45.05552 #>  [9,]  66.73829  65.795137  22.022716 123.90722  37.49667  21.633308  39.16631 #> [10,]  58.38664  78.294317  25.495098 113.58697  30.87070  19.874607  31.63858 #> [11,]  55.65968  79.780950  24.062419 111.12605  28.17801  17.720045  29.22328 #> [12,]  47.16991  79.233831   9.273618 106.27323  19.82423   7.141428  25.78759 #> [13,]  46.62617  85.516080  22.022716 102.92230  19.33908  12.806248  21.30728 #> [14,]  45.61798  89.632583  28.142495 100.52860  19.20937  17.000000  17.57840 #> [15,]  34.77068  92.693042  23.790755  93.66963  13.89244  18.357560  20.32240 #> [16,]  37.37646  95.781000  31.272992  93.32738  15.90597  21.610183  15.13275 #> [17,]  26.92582 105.867842  37.067506  81.89017  17.34935  29.068884  20.22375 #> [18,]  18.62794 109.936345  39.774364  76.10519  15.84298  31.448370  18.41195 #> [19,]  26.87006 132.124941  65.138314  60.90156  37.33631  53.497664  31.08054 #> [20,]  20.02498 145.581592  75.272837  40.12481  48.09366  65.931783  45.88028 #> [21,]  24.67793 148.121572  78.625696  40.02499  50.84290  68.738635  47.46578 #> [22,]  43.87482 161.077621  93.187982  38.60052  64.78426  81.884064  59.33801 #> [23,]  66.24198 190.633156 120.851148  16.58312  92.80086 110.589330  88.92694 #> [24,]  70.63993 196.043363 126.241831  17.34935  98.25477 116.275535  94.56215 #> [25,] 133.06389 259.281700 189.137516  74.35725 161.44968 179.504875 158.03164 #> [26,] 142.30601 267.159129 197.651208  84.89994 169.36056 187.277868 165.10300 #> [27,] 176.27819 301.613992 231.734762 117.66478 203.63202 221.517494 199.61463 #> [28,] 178.59451 304.041116 234.266942 120.21231 206.08736 224.058028 202.00990 #> [29,] 211.45449 336.502600 266.848271 153.05555 238.58122 256.454674 234.32670 #> [30,] 230.78345 356.595008 286.520505 171.77311 258.55947 276.501356 254.71749 #>            [,15]     [,16]     [,17]     [,18]     [,19]     [,20] #>  [1,] 140.641388 291.04295 122.21293 239.62262 194.58931 120.02083 #>  [2,] 137.455447 288.01736 119.17214 236.59459 191.60637 117.21348 #>  [3,] 134.033578 285.25953 116.15937 233.05364 188.02659 114.45523 #>  [4,] 133.154046 284.17600 115.23020 232.31229 187.34727 113.60018 #>  [5,] 128.331602 279.35819 110.62097 227.42471 182.53219 109.19707 #>  [6,] 110.313191 259.31255  91.78780 208.91625 164.20719  89.63258 #>  [7,]  99.428366 250.14796  81.40025 198.56737 153.65220  79.81854 #>  [8,]  89.112289 239.00837  70.46276 187.97340 143.04545  68.23489 #>  [9,]  83.958323 232.21757  65.00000 182.01648 137.30987  62.24147 #> [10,]  73.579889 221.49944  54.71746 170.84789 126.08331  51.46844 #> [11,]  71.028163 219.40602  52.20153 168.55266 123.72550  49.09175 #> [12,]  66.437941 217.33384  48.92852 165.49622 120.65239  48.05206 #> [13,]  62.617889 212.20038  43.92038 160.85397 115.88788  41.30375 #> [14,]  60.811183 208.24025  41.73727 158.04113 113.39753  38.37968 #> [15,]  54.827001 204.84628  38.80722 153.06535 108.57716  39.12800 #> [16,]  55.045436 201.60853  37.65634 151.76627 107.65222  36.12478 #> [17,]  42.071368 192.87820  26.19160 140.08926  95.10520  25.98076 #> [18,]  36.221541 187.68591  20.68816 135.03703  90.09439  21.84033 #> [19,]  27.221315 165.39347  17.57840 116.42165  72.80110  14.35270 #> [20,]   3.162278 151.75638  20.34699  99.10096  54.23099  24.59675 #> [21,]  15.297059 148.60013  25.41653  98.16822  54.78138  28.61818 #> [22,]  28.740216 136.58697  37.70942  88.88757  47.44470  37.69615 #> [23,]  46.162756 106.53169  63.39558  55.24491  13.03840  65.31462 #> [24,]  52.583267 100.68267  70.06426  51.40039  18.05547  72.59477 #> [25,] 114.546934  41.34005 132.87964  20.73644  61.85467 135.48432 #> [26,] 123.385575  30.03331 140.64139  33.27161  71.61704 142.50965 #> [27,] 156.655673  14.31782 174.34735  58.90671 102.79105 176.22713 #> [28,] 159.558767   9.00000 177.20892  62.92853 106.44247 179.20379 #> [29,] 191.984374  41.42463 209.43257  94.70480 138.48827 211.17055 #> [30,] 211.343323  62.36986 229.32510 112.43220 157.21641 231.36767 pairDist(x1) #>             [,1]       [,2]      [,3]       [,4]       [,5]      [,6]      [,7] #>  [1,]   0.000000   8.602325  13.74773  15.297059  21.656408  36.06938  43.01163 #>  [2,]   8.602325   0.000000  12.44990   8.602325  14.525839  31.25700  38.41875 #>  [3,]  13.747727  12.449900   0.00000   9.000000  13.564660  35.18522  36.81032 #>  [4,]  15.297059   8.602325   9.00000   0.000000   6.708204  30.38092  34.14674 #>  [5,]  21.656408  14.525839  13.56466   6.708204   0.000000  27.60435  29.58040 #>  [6,]  36.069378  31.256999  35.18522  30.380915  27.604347   0.00000  16.76305 #>  [7,]  43.011626  38.418745  36.81032  34.146742  29.580399  16.76305   0.00000 #>  [8,]  52.278102  49.183331  48.12484  46.486557  42.941821  23.02173  14.79865 #>  [9,]  59.974995  57.210139  57.39338  55.470713  52.249402  28.80972  24.75884 #> [10,]  70.753092  69.382995  67.29785  67.364679  64.536811  44.59821  37.17526 #> [11,]  72.505172  70.943640  68.57113  68.607580  65.559134  46.04346  37.74917 #> [12,]  75.670338  71.624018  68.79680  67.037303  62.040309  45.70558  33.25658 #> [13,]  79.126481  76.948034  74.01351  73.790243  70.099929  51.51699  41.34005 #> [14,]  83.390647  81.006173  79.65551  78.587531  74.973329  53.16954  45.84757 #> [15,]  89.944427  85.440037  82.77077  80.560536  75.173133  58.83026  47.07441 #> [16,]  92.249661  88.056800  87.59566  84.723078  79.931220  58.24946  50.93133 #> [17,] 100.468901  97.836598  93.26843  93.348808  88.921314  73.62744  60.86050 #> [18,] 105.394497 102.127371  98.12747  97.457683  92.633687  76.63550  64.23395 #> [19,] 126.495059 123.729544 122.18838 120.842873 116.644760  94.78396  87.06894 #> [20,] 140.975175 137.717101 134.09325 133.244137 128.347185 110.85576  99.62931 #> [21,] 144.159634 140.370937 138.11227 136.271787 131.221187 111.71840 102.19589 #> [22,] 155.467038 152.715422 150.93376 149.679658 145.358178 123.72146 115.78428 #> [23,] 185.156690 182.430809 179.17031 178.552513 173.959765 154.77080 144.79296 #> [24,] 191.710720 188.194049 185.62866 184.111379 179.103322 159.54310 150.05666 #> [25,] 254.952937 251.497515 248.40290 247.145706 242.041319 223.20842 213.24868 #> [26,] 262.259414 259.102296 256.72748 255.385982 250.561370 230.05434 221.28262 #> [27,] 296.143546 293.426311 290.23439 289.566918 284.878922 265.25836 255.70882 #> [28,] 299.137092 296.008446 293.34962 292.145512 287.273389 267.16661 258.08719 #> [29,] 331.061928 328.295599 325.49194 324.616697 319.932805 299.64479 290.63723 #> [30,] 351.291901 348.488163 345.11882 344.456093 339.663068 320.38258 310.62518 #>            [,8]      [,9]     [,10]      [,11]     [,12]      [,13]     [,14] #>  [1,]  52.27810  59.97499  70.75309  72.505172  75.67034  79.126481  83.39065 #>  [2,]  49.18333  57.21014  69.38300  70.943640  71.62402  76.948034  81.00617 #>  [3,]  48.12484  57.39338  67.29785  68.571131  68.79680  74.013512  79.65551 #>  [4,]  46.48656  55.47071  67.36468  68.607580  67.03730  73.790243  78.58753 #>  [5,]  42.94182  52.24940  64.53681  65.559134  62.04031  70.099929  74.97333 #>  [6,]  23.02173  28.80972  44.59821  46.043458  45.70558  51.516987  53.16954 #>  [7,]  14.79865  24.75884  37.17526  37.749172  33.25658  41.340053  45.84757 #>  [8,]   0.00000  10.67708  23.00000  23.874673  25.86503  28.740216  32.14032 #>  [9,]  10.67708   0.00000  17.74824  19.026298  25.82634  24.657656  24.59675 #> [10,]  23.00000  17.74824   0.00000   3.000000  26.38181  12.449900  15.55635 #> [11,]  23.87467  19.02630   3.00000   0.000000  24.26932   9.486833  13.96424 #> [12,]  25.86503  25.82634  26.38181  24.269322   0.00000  19.052559  23.79075 #> [13,]  28.74022  24.65766  12.44990   9.486833  19.05256   0.000000  11.18034 #> [14,]  32.14032  24.59675  15.55635  13.964240  23.79075  11.180340   0.00000 #> [15,]  40.23680  38.48376  37.22902  34.713110  14.89966  26.851443  28.60070 #> [16,]  40.80441  34.56877  34.46738  32.695565  23.40940  27.037012  21.21320 #> [17,]  51.17617  48.63127  37.06751  34.132096  30.23243  25.079872  29.69848 #> [18,]  55.03635  52.00961  42.68489  39.761791  31.59114  30.347982  32.64966 #> [19,]  74.60563  67.03730  57.38467  55.497748  56.78908  49.132474  43.20880 #> [20,]  89.64932  84.82335  74.53858  71.923571  66.54322  63.332456  61.98387 #> [21,]  92.05976  86.14523  78.24321  75.848533  69.44062  67.683085  63.89053 #> [22,] 103.56158  96.06768  85.87200  83.970233  84.53402  77.440300  72.13876 #> [23,] 133.54400 127.33421 115.77996 113.551750 112.16506 106.122571 103.11644 #> [24,] 139.56361 133.28166 123.88301 121.597697 117.14521 113.789279 109.98636 #> [25,] 202.98768 196.90099 186.79668 184.493902 180.11385 176.663522 173.34647 #> [26,] 210.09760 203.12804 192.94041 190.874304 188.62131 183.709009 179.34882 #> [27,] 244.42586 237.79403 226.27638 224.182961 222.91927 217.057596 213.54391 #> [28,] 247.03441 240.22073 229.74116 227.644460 225.25763 220.404174 216.34463 #> [29,] 279.18632 272.21499 261.03257 259.019304 257.95736 252.073402 248.06451 #> [30,] 299.57804 293.07508 281.59190 279.465561 277.67967 272.229682 268.86800 #>           [,15]     [,16]      [,17]      [,18]     [,19]     [,20]     [,21] #>  [1,]  89.94443  92.24966 100.468901 105.394497 126.49506 140.97518 144.15963 #>  [2,]  85.44004  88.05680  97.836598 102.127371 123.72954 137.71710 140.37094 #>  [3,]  82.77077  87.59566  93.268430  98.127468 122.18838 134.09325 138.11227 #>  [4,]  80.56054  84.72308  93.348808  97.457683 120.84287 133.24414 136.27179 #>  [5,]  75.17313  79.93122  88.921314  92.633687 116.64476 128.34719 131.22119 #>  [6,]  58.83026  58.24946  73.627441  76.635501  94.78396 110.85576 111.71840 #>  [7,]  47.07441  50.93133  60.860496  64.233947  87.06894  99.62931 102.19589 #>  [8,]  40.23680  40.80441  51.176166  55.036352  74.60563  89.64932  92.05976 #>  [9,]  38.48376  34.56877  48.631266  52.009614  67.03730  84.82335  86.14523 #> [10,]  37.22902  34.46738  37.067506  42.684892  57.38467  74.53858  78.24321 #> [11,]  34.71311  32.69557  34.132096  39.761791  55.49775  71.92357  75.84853 #> [12,]  14.89966  23.40940  30.232433  31.591138  56.78908  66.54322  69.44062 #> [13,]  26.85144  27.03701  25.079872  30.347982  49.13247  63.33246  67.68309 #> [14,]  28.60070  21.21320  29.698485  32.649655  43.20880  61.98387  63.89053 #> [15,]   0.00000  18.27567  25.768197  22.583180  48.25971  54.71746  56.60389 #> [16,]  18.27567   0.00000  33.136083  29.899833  40.01250  55.92853  53.94442 #> [17,]  25.76820  33.13608   0.000000   9.486833  39.10243  42.02380  50.31898 #> [18,]  22.58318  29.89983   9.486833   0.000000  35.05710  36.02777  42.82523 #> [19,]  48.25971  40.01250  39.102430  35.057096   0.00000  29.94996  27.22132 #> [20,]  54.71746  55.92853  42.023803  36.027767  29.94996   0.00000  16.55295 #> [21,]  56.60389  53.94442  50.318983  42.825226  27.22132  16.55295   0.00000 #> [22,]  74.25631  67.63135  63.134776  58.395205  29.03446  31.46427  25.65151 #> [23,] 100.74225  98.51396  86.585218  81.993902  61.88699  46.78675  47.12749 #> [24,] 104.31203 101.64153  94.641429  88.391176  68.16157  52.94337  48.05206 #> [25,] 167.05388 165.35114 156.188988 150.416090 131.27833 114.44213 111.54820 #> [26,] 176.10792 172.23821 165.051507 159.574434 136.32681 123.83053 119.60769 #> [27,] 210.79611 208.04086 197.370211 192.699248 171.08477 156.88531 155.05805 #> [28,] 212.62408 209.32511 201.109423 195.762611 173.43010 159.81552 156.31059 #> [29,] 245.73563 242.21065 232.967809 228.144691 205.23889 192.31745 189.53100 #> [30,] 265.28475 262.95627 252.063484 247.309523 226.41776 211.40956 209.61870 #>           [,22]     [,23]     [,24]     [,25]     [,26]     [,27]     [,28] #>  [1,] 155.46704 185.15669 191.71072 254.95294 262.25941 296.14355 299.13709 #>  [2,] 152.71542 182.43081 188.19405 251.49751 259.10230 293.42631 296.00845 #>  [3,] 150.93376 179.17031 185.62866 248.40290 256.72748 290.23439 293.34962 #>  [4,] 149.67966 178.55251 184.11138 247.14571 255.38598 289.56692 292.14551 #>  [5,] 145.35818 173.95977 179.10332 242.04132 250.56137 284.87892 287.27339 #>  [6,] 123.72146 154.77080 159.54310 223.20842 230.05434 265.25836 267.16661 #>  [7,] 115.78428 144.79296 150.05666 213.24868 221.28262 255.70882 258.08719 #>  [8,] 103.56158 133.54400 139.56361 202.98768 210.09760 244.42586 247.03441 #>  [9,]  96.06768 127.33421 133.28166 196.90099 203.12804 237.79403 240.22073 #> [10,]  85.87200 115.77996 123.88301 186.79668 192.94041 226.27638 229.74116 #> [11,]  83.97023 113.55175 121.59770 184.49390 190.87430 224.18296 227.64446 #> [12,]  84.53402 112.16506 117.14521 180.11385 188.62131 222.91927 225.25763 #> [13,]  77.44030 106.12257 113.78928 176.66352 183.70901 217.05760 220.40417 #> [14,]  72.13876 103.11644 109.98636 173.34647 179.34882 213.54391 216.34463 #> [15,]  74.25631 100.74225 104.31203 167.05388 176.10792 210.79611 212.62408 #> [16,]  67.63135  98.51396 101.64153 165.35114 172.23821 208.04086 209.32511 #> [17,]  63.13478  86.58522  94.64143 156.18899 165.05151 197.37021 201.10942 #> [18,]  58.39521  81.99390  88.39118 150.41609 159.57443 192.69925 195.76261 #> [19,]  29.03446  61.88699  68.16157 131.27833 136.32681 171.08477 173.43010 #> [20,]  31.46427  46.78675  52.94337 114.44213 123.83053 156.88531 159.81552 #> [21,]  25.65151  47.12749  48.05206 111.54820 119.60769 155.05805 156.31059 #> [22,]   0.00000  35.73514  42.15448 103.60019 107.54534 142.36924 144.64093 #> [23,]  35.73514   0.00000  20.14944  72.18033  79.16439 111.07655 114.90866 #> [24,]  42.15448  20.14944   0.00000  63.79655  71.95137 107.50814 108.34205 #> [25,] 103.60019  72.18033  63.79655   0.00000  22.64950  49.03060  48.10405 #> [26,] 107.54534  79.16439  71.95137  22.64950   0.00000  39.86226  37.34970 #> [27,] 142.36924 111.07655 107.50814  49.03060  39.86226   0.00000  17.72005 #> [28,] 144.64093 114.90866 108.34205  48.10405  37.34970  17.72005   0.00000 #> [29,] 176.28386 146.42746 141.79210  82.07923  70.63993  36.45545  35.05710 #> [30,] 197.71191 166.13549 161.75599  99.69453  92.40130  55.45268  55.90170 #>           [,29]     [,30] #>  [1,] 331.06193 351.29190 #>  [2,] 328.29560 348.48816 #>  [3,] 325.49194 345.11882 #>  [4,] 324.61670 344.45609 #>  [5,] 319.93281 339.66307 #>  [6,] 299.64479 320.38258 #>  [7,] 290.63723 310.62518 #>  [8,] 279.18632 299.57804 #>  [9,] 272.21499 293.07508 #> [10,] 261.03257 281.59190 #> [11,] 259.01930 279.46556 #> [12,] 257.95736 277.67967 #> [13,] 252.07340 272.22968 #> [14,] 248.06451 268.86800 #> [15,] 245.73563 265.28475 #> [16,] 242.21065 262.95627 #> [17,] 232.96781 252.06348 #> [18,] 228.14469 247.30952 #> [19,] 205.23889 226.41776 #> [20,] 192.31745 211.40956 #> [21,] 189.53100 209.61870 #> [22,] 176.28386 197.71191 #> [23,] 146.42746 166.13549 #> [24,] 141.79210 161.75599 #> [25,]  82.07923  99.69453 #> [26,]  70.63993  92.40130 #> [27,]  36.45545  55.45268 #> [28,]  35.05710  55.90170 #> [29,]   0.00000  26.26785 #> [30,]  26.26785   0.00000"},{"path":"/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading characters to a string — prefix","title":"Add leading characters to a string — prefix","text":"Add leading characters string. function useful ensuring, say, files get sorted particular order. example, operating systems file name \"file 1\" come first, \"file 10\", \"file 11\", \"file 12\", etc., \"file 2\", \"file 21\", . Using prefix, can add one leading zeros file names \"file 01\", \"file 02\", \"file 03\", ... sort way.","code":""},{"path":"/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading characters to a string — prefix","text":"","code":"prefix(x, len, pad = \"0\")"},{"path":"/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading characters to a string — prefix","text":"x Character character list add prefix. len total number characters desired string. string already length longer nothing prefixed string. pad Character. Symbol prefix string.","code":""},{"path":"/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading characters to a string — prefix","text":"Character character vector.","code":""},{"path":"/reference/prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading characters to a string — prefix","text":"","code":"prefix(1:5, len=2) #> [1] \"01\" \"02\" \"03\" \"04\" \"05\" prefix(1:5, len=5) #> [1] \"00001\" \"00002\" \"00003\" \"00004\" \"00005\" prefix(1:5, len=3, pad='!') #> [1] \"!!1\" \"!!2\" \"!!3\" \"!!4\" \"!!5\""},{"path":"/reference/quadArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Area of a quadrilateral — quadArea","title":"Area of a quadrilateral — quadArea","text":"Calculates area quadrilateral dividing two triangles applying Heron's formula.","code":""},{"path":"/reference/quadArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area of a quadrilateral — quadArea","text":"","code":"quadArea(x, y)"},{"path":"/reference/quadArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area of a quadrilateral — quadArea","text":"x Numeric list. x coordinates quadrilateral. y Numeric list. y coordinates quadrilateral.","code":""},{"path":"/reference/quadArea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area of a quadrilateral — quadArea","text":"Numeric (area quadrilateral units x y.","code":""},{"path":"/reference/quadArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area of a quadrilateral — quadArea","text":"","code":"x <- c(0, 6, 4, 1) y <- c(0, 1, 7, 4) quadArea(x, y) #> [1] 21.24036 plot(1, type='n', xlim=c(0, 7), ylim=c(0, 7), xlab='x', ylab='y') polygon(x, y) text(x, y, LETTERS[1:4], pos=4) lines(x[c(1, 3)], y[c(1, 3)], lty='dashed', col='red')"},{"path":"/reference/renumSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber a sequence of numbers — renumSeq","title":"Renumber a sequence of numbers — renumSeq","text":"function renumbers sequence, helpful \"gaps\" appear sequence. example, consider sequence {1, 1, 3, 1, 8, 8, 8}. function renumber sequence {1, 1, 2, 1, 3, 3, 3}. NAs ignored.","code":""},{"path":"/reference/renumSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"renumSeq(x)"},{"path":"/reference/renumSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber a sequence of numbers — renumSeq","text":"x Vector numerical character values.","code":""},{"path":"/reference/renumSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber a sequence of numbers — renumSeq","text":"vector.","code":""},{"path":[]},{"path":"/reference/renumSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"x <- c(1, 1, 3, 1, 8, 8, 8) renumSeq(x) #> [1] 1 1 2 1 3 3 3  x <- c(1, 1, 3, 1, 8, NA, 8, 8) renumSeq(x) #> [1]  1  1  2  1  3 NA  3  3  y <- c('c', 'c', 'b', 'a', 'w', 'a') renumSeq(y) #> [1] 3 3 2 1 4 1"},{"path":"/reference/rotateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate values in a matrix — rotateMatrix","title":"Rotate values in a matrix — rotateMatrix","text":"function rotates values matrix user-specified number degrees. almost cases values fall outside matrix discarded.  Cells rotated values become NA. square matrices can accommodated. cases rotation cause cells assigned value original values fall within . instances mean value surrounding cells assigned cells missing values. angle rotation small rotation occur.","code":""},{"path":"/reference/rotateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"rotateMatrix(x, rot)"},{"path":"/reference/rotateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate values in a matrix — rotateMatrix","text":"x Object class matrix. rot Numeric. Number degrees rotate matrix. Values represent difference degrees \"north\" () clockwise direction.","code":""},{"path":"/reference/rotateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate values in a matrix — rotateMatrix","text":"matrix.","code":""},{"path":[]},{"path":"/reference/rotateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"x <- matrix(1:100, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100 rotateMatrix(x, 90) # 90 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   10    9    8    7    6    5    4    3    2     1 #>  [2,]   20   19   18   17   16   15   14   13   12    11 #>  [3,]   30   29   28   27   26   25   24   23   22    21 #>  [4,]   40   39   38   37   36   35   34   33   32    31 #>  [5,]   50   49   48   47   46   45   44   43   42    41 #>  [6,]   60   59   58   57   56   55   54   53   52    51 #>  [7,]   70   69   68   67   66   65   64   63   62    61 #>  [8,]   80   79   78   77   76   75   74   73   72    71 #>  [9,]   90   89   88   87   86   85   84   83   82    81 #> [10,]  100   99   98   97   96   95   94   93   92    91 rotateMatrix(x, 180) # 180 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  100   90   80   70   60   50   40   30   20    10 #>  [2,]   99   89   79   69   59   49   39   29   19     9 #>  [3,]   98   88   78   68   58   48   38   28   18     8 #>  [4,]   97   87   77   67   57   47   37   27   17     7 #>  [5,]   96   86   76   66   56   46   36   26   16     6 #>  [6,]   95   85   75   65   55   45   35   25   15     5 #>  [7,]   94   84   74   64   54   44   34   24   14     4 #>  [8,]   93   83   73   63   53   43   33   23   13     3 #>  [9,]   92   82   72   62   52   42   32   22   12     2 #> [10,]   91   81   71   61   51   41   31   21   11     1 rotateMatrix(x, 45) # 45 degrees to the right #>       [,1] [,2] [,3]   [,4]     [,5]   [,6]   [,7] [,8]   [,9] [,10] #>  [1,]   NA   NA    4  3.000 13.00000 22.000 21.000   31     NA    NA #>  [2,]   NA  7.6    5 14.000 19.75000 23.000 32.000   41 47.200    NA #>  [3,]    7  6.0   16 25.000 24.00000 34.000 43.000   52 51.000    61 #>  [4,]    8 17.0   26 27.000 35.00000 44.000 48.500   53 62.000    71 #>  [5,]   19 24.0   27 36.000 44.14286 45.000 54.000   63 68.875    72 #>  [6,]   29 28.0   38 47.000 46.00000 56.000 65.000   74 73.000    83 #>  [7,]   30 39.0   48 52.625 57.00000 66.000 71.875   75 84.000    93 #>  [8,]   40 50.0   59 58.000 68.00000 77.000 76.000   86 95.000    94 #>  [9,]   NA 55.8   60 69.000 78.00000 82.625 87.000   96 93.600    NA #> [10,]   NA   NA   70 80.000 89.00000 88.000 98.000   97     NA    NA rotateMatrix(x, 7) # slight rotation #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   NA   11   21   31   41   51   61   71    81 #>  [2,]    3   12   22   32   42   52   62   72   82    NA #>  [3,]    4   13   23   33   43   53   63   73   83    92 #>  [4,]    5   14   24   34   44   54   64   74   84    93 #>  [5,]    6   15   25   35   45   55   65   75   85    94 #>  [6,]    7   16   26   36   46   56   66   76   86    95 #>  [7,]    8   17   27   37   47   57   67   77   87    96 #>  [8,]    9   18   28   38   48   58   68   78   88    97 #>  [9,]   NA   19   29   39   49   59   69   79   89    98 #> [10,]   20   30   40   50   60   70   80   90   NA    99 rotateMatrix(x, 5) # no rotation because angle is too small #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100"},{"path":"/reference/roundTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to nearest target value — roundTo","title":"Round to nearest target value — roundTo","text":"function rounds value nearest \"target\" value (e.g., round 0.72 nearest 0.25, 0.75).","code":""},{"path":"/reference/roundTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(x, target, roundFx = round)"},{"path":"/reference/roundTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to nearest target value — roundTo","text":"x Numeric. target Numeric. roundFx round, floor, ceiling.","code":""},{"path":"/reference/roundTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to nearest target value — roundTo","text":"Numeric.","code":""},{"path":"/reference/roundTo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(0.73, 0.05) #> [1] 0.75 roundTo(0.73, 0.1) #> [1] 0.7 roundTo(0.73, 0.25) #> [1] 0.75 roundTo(0.73, 0.25, floor) #> [1] 0.5 roundTo(0.73, 1) #> [1] 1 roundTo(0.73, 10) #> [1] 0 roundTo(0.73, 10, ceiling) #> [1] 10"},{"path":"/reference/roundedSigDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of significant digits in rounded numbers — roundedSigDigits","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"function \"examines\" numeric value (typically numbers decimal place) estimates either: number significant digits numerator denominator fraction (approximately) result given value. number digits integer may rounded, depending whether input values decimal place integer. Negative values treated positive values negative number returns value positive version. See Details details. Obviously, values can appear rounded repeating even !","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(x, minReps = 3)"},{"path":"/reference/roundedSigDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"x Numeric numeric vector. minReps Integer. Number times digit sequence digits occur decimal place needs repeated assume represents repeating series thus assumed arise using decimal places represent fraction. Default 3. example, minReps 3 0.111 assumed represent repeating value 1 occurs three times, -1 returned. However, minReps 4 function assume value four digits, next digit 1, returns -3 three values decimal place. penultimate digit >5 last digit equal penultimate digit plus 1, last digit counts repeat penultimate digit.  0.067 assumed two repeating 6s.  minReps 0 1 function (usually) return negative total number decimal places value.","code":""},{"path":"/reference/roundedSigDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"Integer (number digits) NA (appear rounded).","code":""},{"path":"/reference/roundedSigDigits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"values least one non-zero digit decimal place repeated series digits detected, function simply returns total number digits (ignoring trailing zeros) times -1. example: 0.3 returns -1 just one value decimal. 0.34567 returns -5 repeats 5th decimal place. 0.1212125 returns -7 repeats (starting right) 7th decimal place. 0.111117 returns -6 repeats (starting right) 7th decimal place. function takes account rounding : 0.666 might truncated version 2/3. Two three 1 significant digit, function returns -1 (1 value decimal place). 0.667 also returns -1 might represent rounding 2/3 customary round digits next digit >5. 0.3334 returns -4 inappropriate round 3 4 next digit 5 less. Repeating series accounted . example: 0.121212 returns -2 \"12\" starts repeating second decimal place. 0.000678678678 returns -6 \"678\" starts repeating 6th place. 0.678678678 returns -3. 0.678678679 also returns -3 678 rounded 679 next digit 6. Note can set minimum number times digit series needs repeated count repeated using argument minReps. default 3, digits series digits need repeated least 3 times count repetition, can changed: 0.1111 returns -1 using default requirement 3 repetitions -4 number minimum repetitions 5 . 0.121212 returns -2 using default requirement 3 repetitions -6 number minimum repetitions 4 . Trailing zeros ignored, 0.12300 returns -3. values digits decimal place location first non-zero digit right returned positive integer. example: 234 returns 1 first non-zero digit right 1s place. 100 return 3 first non-zero digit right 100s place. 70001 returns 1 first non-zero digit right 1s place. However, note oddities: 4E5 returns 6 4E50 probably return 51 many computers hard time internally representing numbers large. 4E-5 returns -5  probably return -50 many computers hard time internally representing numbers small. -100 100 return 3 -0.12 0.12 return -2 negative sign ignored. 0 returns 0. NA NaN returns NA.","code":""},{"path":"/reference/roundedSigDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(0.3) #> [1] -1 roundedSigDigits(0.34567) #> [1] -5 roundedSigDigits(0.1212125) #> [1] -7 roundedSigDigits(0.111117) #> [1] -6 roundedSigDigits(0.666) #> [1] -1 roundedSigDigits(0.667) #> [1] -1 roundedSigDigits(0.3334) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.000678678678) #> [1] -6 roundedSigDigits(0.678678678) #> [1] -3 roundedSigDigits(0.678678679) #> [1] -3 roundedSigDigits(0.1111) #> [1] -1 roundedSigDigits(0.1111, minReps=5) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.121212, minReps=4) #> [1] -6 roundedSigDigits(234) #> [1] 1 roundedSigDigits(100) #> [1] 3 roundedSigDigits(70001) #> [1] 1 roundedSigDigits(4E5) #> [1] 1 roundedSigDigits(4E50) #> [1] 2 roundedSigDigits(4E-5) #> [1] 1 roundedSigDigits(4E-50) #> [1] 2 roundedSigDigits(0) #> [1] 0 roundedSigDigits(NA) #> [1] NA  x <- c(0.0667, 0.0667, 0.067) roundedSigDigits(x) #> [1] -2 -2 -3"},{"path":"/reference/rowColIndexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between row- and column-style indexing of matrices — rowColIndexing","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"functions converts index values cells row- column-style indexing cells matrices. Column indexing (default matrices) cell \"1\" upper left corner matrix. cell \"2\" , . numbering wraps around top next column. Row indexing (default rasters, example), also cell \"1\" upper left, cell \"2\" right, . Numbering wraps around next row.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"rowColIndexing(x, cell, dir)"},{"path":"/reference/rowColIndexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"x Either matrix, vector two values, one number rows one number columns matrix. cell One cell indices (positive integers). dir \"direction\" convert. 'row', assumed cell column-style index converted row-style index. 'col', assumed cell row-style index converted column-style index.","code":""},{"path":"/reference/rowColIndexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"One positive integers.","code":""},{"path":"/reference/rowColIndexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"# column versus row indexing colIndex <- matrix(1:40, nrow=5, ncol=8) rowIndex <- matrix(1:40, nrow=5, ncol=8, byrow=TRUE) colIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    6   11   16   21   26   31   36 #> [2,]    2    7   12   17   22   27   32   37 #> [3,]    3    8   13   18   23   28   33   38 #> [4,]    4    9   14   19   24   29   34   39 #> [5,]    5   10   15   20   25   30   35   40 rowIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40  # examples x <- matrix('a', nrow=5, ncol=8, byrow=TRUE) rowColIndexing(x, cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(x, cell=c(1, 6, 20), 'col') #> [1]  1 26 18  rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'col') #> [1]  1 26 18"},{"path":"/reference/say.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer version of print() or cat() function — say","title":"Nicer version of print() or cat() function — say","text":"function nicer version print() cat(), especially used inline functions displays immediately pastes strings together. also rudimentary optional word wrapping.","code":""},{"path":"/reference/say.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer version of print() or cat() function — say","text":"","code":"say(   ...,   pre = 0,   post = 1,   breaks = NULL,   wiggle = 10,   preBreak = 1,   level = NULL,   deco = \"#\" )"},{"path":"/reference/say.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nicer version of print() or cat() function — say","text":"... character strings print pre Integer >= 0.  Number blank lines print strings post Integer >= 0. Number blank lines print strings breaks Either NULL, causes strings printed line (wrap overflow) positive integer wraps lines character length (e.g., breaks=80 inserts line breaks every 80 characters). wiggle Integer >- 0.  Allows line overrun breaks length characters inserting line breaks. preBreak wrapping long lines indicates subsequent lines indented. NULL causes lines printed starting column 1 display device. positive integer inserts preBreak number spaces printing line. string causes line start string. level Integer NULL. NULL, items ... displayed -. Otherwise, value 1, 2, 3 indicates teh heading level, lower numbers causing decoration spacing used. deco Character. Character decorate text level NULL.","code":""},{"path":"/reference/say.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nicer version of print() or cat() function — say","text":"Nothing (side effect output display device).","code":""},{"path":"/reference/say.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nicer version of print() or cat() function — say","text":"","code":"say('The quick brown fox ', 'jumps over the lazy ', 'Susan.') #>  The quick brown fox jumps over the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', breaks=10) #>  The quick  #>  brown fox  #>  jumps over #>   the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=1) #>  #>  ######################################################  #>  ### The quick brown fox jumps over the lazy Susan. ### #>  ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=2) #>  #>     ### The quick brown fox jumps over the lazy Susan. ### #>     ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=3) #>  #>        ### The quick brown fox jumps over the lazy Susan.  #>"},{"path":"/reference/stretchMinMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale values — stretchMinMax","title":"Rescale values — stretchMinMax","text":"function rescales vector numeric values arbitrary range. Optionally, stretch values equal lowest value can \"nudged\" slightly higher half minimum value across rescaled vector values > 0.","code":""},{"path":"/reference/stretchMinMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale values — stretchMinMax","text":"","code":"stretchMinMax(   x,   lower = 0,   upper = 1,   nudgeUp = FALSE,   nudgeDown = FALSE,   na.rm = FALSE )"},{"path":"/reference/stretchMinMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale values — stretchMinMax","text":"x Numeric list. lower Numeric, low end range stretch. upper Numeric, high end range stretch. nudgeUp, nudgeDown Logical, FALSE (default) nothing. TRUE ** rescaling [0, 1], small value added values x equal 0. value equal 0.5 * min(x[x > 0]). na.rm Logical, FALSE (default) values x NA returned value NA. TRUE NA's ignored calculation.","code":""},{"path":"/reference/stretchMinMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale values — stretchMinMax","text":"Numeric value.","code":""},{"path":[]},{"path":"/reference/stretchMinMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale values — stretchMinMax","text":"","code":"x <- 1:10 stretchMinMax(x) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 1.0000000 stretchMinMax(x, lower=2, upper=5) #>  [1] 2.000000 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeUp=TRUE) #>  [1] 0.05555556 0.11111111 0.22222222 0.33333333 0.44444444 0.55555556 #>  [7] 0.66666667 0.77777778 0.88888889 1.00000000 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeDown=TRUE) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 0.9444444 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE, nudgeDown=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 4.833333 x <- c(1:5, NA) stretchMinMax(x) #> [1] NA NA NA NA NA NA stretchMinMax(x, na.rm=TRUE) #> [1] 0.00 0.25 0.50 0.75 1.00   NA"},{"path":"/reference/which.pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Which vector has maximum value at each element — which.pmax","title":"Which vector has maximum value at each element — which.pmax","text":"functions vectorized versions .max .min, return index value maximum minimum (first maximum/minimum value, tie). case, function supplied two vectors length. element position (e.g., first element vector, second element, etc.) function returns integer indicating vector highest lowest value (index first vector highest lowest value case ties).","code":""},{"path":"/reference/which.pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"which.pmax(..., na.rm = TRUE)  which.pmin(..., na.rm = TRUE)"},{"path":"/reference/which.pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which vector has maximum value at each element — which.pmax","text":"... Two vectors. lengths match, results likely unanticipated. na.rm Logical, FALSE vectors contains NA NaN, function return NA. TRUE (default), NA returned elements position NA NaN.","code":""},{"path":"/reference/which.pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which vector has maximum value at each element — which.pmax","text":"Vector length input, numeric values indicating vector highest value position. case ties, index first vector returned.","code":""},{"path":"/reference/which.pmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Which vector has maximum value at each element — which.pmax","text":".pmin(): vector minimum value element","code":""},{"path":[]},{"path":"/reference/which.pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"set.seed(123) a <- sample(9, 5) b <- sample(9, 5) c <- sample(9, 5) a[2:3] <- NA b[3] <- NA a[6] <- NA b[6] <- NA c[6] <- NA which.pmax(a, b, c) #> [1]  2  2  3  2  1 NA which.pmin(a, b, c) #> [1]  1  2  3  3  2 NA which.pmax(a, b, c, na.rm=FALSE) #> [1]  2 NA NA  2  1 NA which.pmin(a, b, c, na.rm=FALSE) #> [1]  1 NA NA  3  2 NA"},{"path":"/reference/yearFromDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Year from date formats that are possibly ambiguous — yearFromDate","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"function attempts return year characters representing dates formats. formats can ambigous varied within set.  example, returns \"1982\" (9982 century ambigous) \"11/20/82\", \"1982-11-20\", \"Nov. 20, 1982\", \"20 Nov 1982\", \"20-Nov-1982\", \"20/Nov/1982\", \"20 Nov. 82\", \"20 Nov 82\". function handles ambiguous centuries (e.g., 1813, 1913, 2013) including dummy place holder century place (.e., 9913). Note may return warnings like \"NAs introduced coercion\".","code":""},{"path":"/reference/yearFromDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(x, yearLast = TRUE)"},{"path":"/reference/yearFromDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"x Character character list, one dates. yearLast Logical, TRUE assume dates like \"XX/YY/ZZ\" list year last (=ZZ).  FALSE, assume first (=XX).","code":""},{"path":"/reference/yearFromDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"Numeric.","code":""},{"path":"/reference/yearFromDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(1969, yearLast=TRUE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-Jul-1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-19-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-22-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/Jul/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/Jul/1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10/19/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/19/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/22/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 19 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 22 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=TRUE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=TRUE) # --> 2014 #> [1] 2014  yearFromDate(1969, yearLast=FALSE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=FALSE) # --> 9971 #> [1] 9910 yearFromDate('10-Jul-1971', yearLast=FALSE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10-19-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3-22-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/19/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10/19/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3/22/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10 19 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3 22 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=FALSE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=FALSE) # --> 2014 #> [1] 2014"},{"path":"/news/index.html","id":"omnibus-113","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.3","title":"omnibus 1.1.3","text":"o Added insert() o Added renumSeq() o Fixed bug insertCol()","code":""},{"path":"/news/index.html","id":"omnibus-112","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.2","title":"omnibus 1.1.2","text":"CRAN release: 2022-02-15 o Removed clear()","code":""},{"path":"/news/index.html","id":"omnibus-111","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.1","title":"omnibus 1.1.1","text":"o Removed () o Cleaned help o First sumbission CRAN","code":""}]
